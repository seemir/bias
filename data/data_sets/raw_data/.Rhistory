HFfullDataSet <- as.data.frame(cbind(id, HFfullDataSet))
SyndClass <- as.data.frame(cbind(id, syndrome))
# ----------------------------------------------------------- #
# Save full data set
# ----------------------------------------------------------- #
save(HFfullDataSet,
file='../source/data_files/HF_full_data_set.Rdat')
save(SyndClass,
file='../source/data_files/syndromes_HF_full.Rdat')
# ----------------------------------------------------------- #
# ----------------------------------------------------------- #
# Install packages (if not already installed)
# ----------------------------------------------------------- #
Packages <- c("R.matlab", "data.table","stringr")
# install.packages(Packages)
# ----------------------------------------------------------- #
# Load relevant packages
# ----------------------------------------------------------- #
lapply(Packages, library, character.only = TRUE)
source("../source/_helper_func.R")
# ----------------------------------------------------------- #
# Read matlab files into R
# ----------------------------------------------------------- #
dataSetHFpEF <- readMat('data_use_HFpEF.mat')
dataSetHFmrEF <- readMat('data_use_HFmrEF.mat')
# ----------------------------------------------------------- #
# Extract the data matrix from matlab files
# ----------------------------------------------------------- #
HFpEFmat <- dataSetHFpEF$All.data
HFmrEFmat <- dataSetHFmrEF$All.data
# ----------------------------------------------------------- #
# Get patient ids
# ----------------------------------------------------------- #
patientIdHFpEF <- dataSetHFpEF$patientID
patientIdHFmrEF <- dataSetHFmrEF$patientID
# ----------------------------------------------------------- #
# Add patient ids to HF_matrices and all column names
# ----------------------------------------------------------- #
HFpEFmat <- cbind(patientIdHFpEF, HFpEFmat)
HFmrEFmat <- cbind(patientIdHFmrEF, HFmrEFmat)
colnames(HFpEFmat) <- c('patientid', as.vector(unlist(
dataSetHFpEF$Varnames)))
colnames(HFmrEFmat) <- c('patientid', as.vector(unlist(
dataSetHFmrEF$Varnames)))
# ----------------------------------------------------------- #
# Consolidate naming conventions for some variables
# ----------------------------------------------------------- #
# In the HFpEF matrix
# ----------------------------------------------------------- #
setnames(as.data.frame(HFpEFmat),
old = c("E_e","LVfunction", "ECGRhythm_other",
"ECGQRS_other", "Other_ethnicity", "Plt",
"COPD"),
new = c("Ee", "LVEF", "ECGRhythmother", "ECGQRSother",
"Otherethnicity", "Plts", "COPDasthma"))
# ----------------------------------------------------------- #
# In the HFmrEF matrix
# ----------------------------------------------------------- #
setnames(as.data.frame(HFmrEFmat),
old=c("Admissionweight","BMI","Numberofcomorbidities",
"Afrocaribbean", "Caucasian","Pulse","NtproBNP",
"E", "ECGRhythm_other", "LVHand_orLAE",
"ECGQRS_other", "iron", "Timetoadmission"),
new = c("admissionwgt","BmIadmission","comorbidities",
"Black","White","pulse","NTproBNP", "Ewave",
"ECGRhythmother", "LVHandorLAE",
"ECGQRSother", "Ironlevels", "TimetoHFadm"))
# ----------------------------------------------------------- #
# Lowercase letters for all the colnames
# ----------------------------------------------------------- #
colnames(HFpEFmat) <- tolower(colnames(HFpEFmat))
colnames(HFmrEFmat) <- tolower(colnames(HFmrEFmat))
# ----------------------------------------------------------- #
# Rename dupblicate names in variables af and ar
# ----------------------------------------------------------- #
if(all(colnames(HFmrEFmat)[c(3,5)] == c("af", "ar"))){
colnames(HFmrEFmat)[c(3,5)] <- c("a-fib", "ai")
}
# ----------------------------------------------------------- #
if(all(colnames(HFpEFmat)[c(4,8)] == c("af", "ar"))){
colnames(HFpEFmat)[c(4,8)] <- c("a-fib", "ai")
}
# ----------------------------------------------------------- #
# Address error in HFmrEF - lvef data point nr. 1
# ----------------------------------------------------------- #
HFmrEFmat[1, "lvef"] <- 40.45
# ----------------------------------------------------------- #
# Replace NaN values with NA using the make_na function
# ----------------------------------------------------------- #
HFpEFmat <- make.na(HFpEFmat)
HFmrEFmat <- make.na(HFmrEFmat)
# ----------------------------------------------------------- #
# Store indicator and non-indicator variables in seperate
# variables using the rm_indicator function
# ----------------------------------------------------------- #
HFpEFrmInd <- rm.indicator(HFpEFmat, n.uniq = 5)
HFmrEFrmInd <- rm.indicator(HFmrEFmat, n.uniq = 5)
# ----------------------------------------------------------- #
# Store the non-indicator variables for later
# ----------------------------------------------------------- #
HFpEFmatNoInd <- HFpEFrmInd$non.indicator
HFmrEFmatNoInd <- HFmrEFrmInd$non.indicator
# ----------------------------------------------------------- #
# Store the indicator variables for later
# ----------------------------------------------------------- #
HFpEFmatInd <- HFpEFrmInd$indicator
HFmrEFmatInd <- HFmrEFrmInd$indicator
# ----------------------------------------------------------- #
# Move some variables between matrices
# ----------------------------------------------------------- #
# Change RVfunction from non-indicator to indicator variable
# ----------------------------------------------------------- #
HFpEFrv <- move.columns(HFpEFmatNoInd, HFpEFmatInd,
"rvfunction")
HFpEFmatInd <- HFpEFrv$to.mat
HFpEFmatNoInd <- HFpEFrv$from.mat
# ----------------------------------------------------------- #
HFmrEFrv <- move.columns(HFmrEFmatNoInd, HFmrEFmatInd,
"rvfunction")
HFmrEFmatInd<- HFmrEFrv$to.mat
HFmrEFmatNoInd <- HFmrEFrv$from.mat
# ----------------------------------------------------------- #
# Change BmIadmission from indicator variable to non_indicator
# variable
# ----------------------------------------------------------- #
HFmrEFbmi <- move.columns(HFmrEFmatInd, HFmrEFmatNoInd,
"bmiadmission")
HFmrEFmatInd <- HFmrEFbmi$from.mat
HFmrEFmatNoInd <- HFmrEFbmi$to.mat
# ----------------------------------------------------------- #
# Change nyhaclass from non-indicator to indicator variable
# ----------------------------------------------------------- #
HFpEFnyhaClass <- move.columns(HFpEFmatNoInd, HFpEFmatInd,
"nyhaclass")
HFpEFmatInd <- HFpEFnyhaClass$to.mat
HFpEFmatNoInd <- HFpEFnyhaClass$from.mat
# ----------------------------------------------------------- #
# Convert zeros to missings, the following variables are not to
# be converted.
# ----------------------------------------------------------- #
notZerosHFpEF <- c("comorbidities", "weightchange",
"daysfollowupdischarge", "timetonextadm")
notZerosHFmrEF <- c("numbercomorditiesnoida","comorbidities",
"timetoadmission", "timetoecho",
"timetofollowupfrombnp",
"timetofollowupfromdischarge",
"timetofirstcardiachospitalisation")
HFpEFmatNoInd <- zero.to.na(HFpEFmatNoInd, notZerosHFpEF)
HFmrEFmatNoInd <- zero.to.na(HFmrEFmatNoInd, notZerosHFmrEF)
# ----------------------------------------------------------- #
# Concatinate the indicator and non-indicator variables
# ----------------------------------------------------------- #
HFpEFmat <- cbind(HFpEFmatNoInd, HFpEFmatInd)
HFmrEFmat <- cbind(HFmrEFmatNoInd, HFmrEFmatInd)
# ----------------------------------------------------------- #
# Save all matrices as .Rdat in data_files folder
# ----------------------------------------------------------- #
save(HFpEFmat,
file='../source/data_files/data_use_HFpEF.Rdat')
save(HFpEFmatInd,
file = '../source/data_files/HFpEF_ind_var.Rdat')
save(HFpEFmatNoInd,
file = '../source/data_files/HFpEF_not_ind.Rdat')
# ----------------------------------------------------------- #
save(HFmrEFmat,
file='../source/data_files/data_use_HFmrEF.Rdat')
save(HFmrEFmatInd,
file = '../source/data_files/HFmrEF_ind_var.Rdat')
save(HFmrEFmatNoInd,
file = '../source/data_files/HFmrEF_not_ind.Rdat')
# ----------------------------------------------------------- #
# Re-code patient group labels
# ----------------------------------------------------------- #
# Get patient groups
# ----------------------------------------------------------- #
patientGroupsHFpEF <- as.matrix(unlist(
dataSetHFpEF$Patient.group))
patientGroupsHFmrEF <- as.matrix(unlist(
dataSetHFmrEF$Patient.group))
# ----------------------------------------------------------- #
# Labels of clinical outcomes
# ----------------------------------------------------------- #
deceased <- c("IN", "Z", "Y", "X")
reAdmission <- c("V", "U")
# ----------------------------------------------------------- #
# Split labels
# ----------------------------------------------------------- #
HFpEFsplit <- str_split_fixed(patientGroupsHFpEF,", ", n = 2)
HFmrEFsplit <- str_split_fixed(patientGroupsHFmrEF,", ",n = 2)
# ----------------------------------------------------------- #
# Re-coding mortality labels
# ----------------------------------------------------------- #
isDeceasedHFpEF <- HFpEFsplit[,1] %in% deceased
isDeceasedHFmrEF <- HFmrEFsplit[,1] %in% deceased
deceasedHFpEF <- ifelse(isDeceasedHFpEF, "yes", "no")
deceasedHFmrEF <- ifelse(isDeceasedHFmrEF, "yes", "no")
# ----------------------------------------------------------- #
# Re-coding re-admission labels
# ----------------------------------------------------------- #
isReAdmittedHFpEF <- HFpEFsplit[,1] %in% reAdmission |
HFpEFsplit[,2] %in% reAdmission
isReAdmittedHFmrEF <- HFmrEFsplit[,1] %in% reAdmission |
HFmrEFsplit[,2] %in% reAdmission
reAdmissionHFpEF <- ifelse(isReAdmittedHFpEF,"yes","no")
reAdmissionHFmrEF <- ifelse(isReAdmittedHFmrEF,"yes","no")
# ----------------------------------------------------------- #
# Add outcomes to matrix
# ----------------------------------------------------------- #
HFpEFoutcomes <- cbind(patientIdHFpEF, patientGroupsHFpEF,
deceasedHFpEF, reAdmissionHFpEF)
HFmrEFoutcomes <- cbind(patientIdHFmrEF, patientGroupsHFmrEF,
deceasedHFmrEF, reAdmissionHFmrEF)
# ----------------------------------------------------------- #
# Add colnames to matrices
# ----------------------------------------------------------- #
colnames(HFpEFoutcomes) <- colnames(HFmrEFoutcomes) <-
c("patientid", "patientgroup", "deceased", "readmitted")
# ----------------------------------------------------------- #
# Save the matrices as .Rdat file
# ----------------------------------------------------------- #
save(HFpEFoutcomes,
file='../source/data_files/outcomes_HFpEF.Rdat')
save(HFmrEFoutcomes,
file='../source/data_files/outcomes_HFmrEF.Rdat')
# ----------------------------------------------------------- #
# Create one file with all the common variables in both
# HFpEF and HFmrEF data sets.
# ----------------------------------------------------------- #
# Find common columns in both data sets
# ----------------------------------------------------------- #
HFpEFcol <- colnames(HFpEFmat) %in% colnames(HFmrEFmat)
HFmrEFcol <- colnames(HFmrEFmat) %in% colnames(HFpEFmat)
# ----------------------------------------------------------- #
HFpEFsame <- HFpEFmat[, HFpEFcol]
HFmrEFsame  <- HFmrEFmat[, HFmrEFcol]
rm(HFpEFcol, HFmrEFcol)
# ----------------------------------------------------------- #
# Sort columns
# ----------------------------------------------------------- #
HFpEFsame <- HFpEFsame[, sort(colnames(HFpEFsame[,-1]))]
HFmrEFsame <- HFmrEFsame[, sort(colnames(HFmrEFsame[,-1]))]
# ----------------------------------------------------------- #
# Create syndrome class matrix
# ----------------------------------------------------------- #
syndrome <- rep(c(1, 2),
times = c(nrow(HFpEFmat), nrow(HFmrEFmat)))
# ----------------------------------------------------------- #
# Add patient id, create full data set and syndrome classes
# ----------------------------------------------------------- #
HFfullDataSet <- rbind(HFpEFsame, HFmrEFsame)
id <- seq(1, nrow(HFfullDataSet))
HFfullDataSet <- as.data.frame(cbind(id, HFfullDataSet))
SyndClass <- as.data.frame(cbind(id, syndrome))
# ----------------------------------------------------------- #
# Save full data set
# ----------------------------------------------------------- #
save(HFfullDataSet,
file='../source/data_files/HF_full_data_set.Rdat')
save(SyndClass,
file='../source/data_files/syndromes_HF_full.Rdat')
# ----------------------------------------------------------- #
# ----------------------------------------------------------- #
# Install packages (if not already installed)
# ----------------------------------------------------------- #
Packages <- c("R.matlab", "data.table","stringr")
# install.packages(Packages)
# ----------------------------------------------------------- #
# Load relevant packages
# ----------------------------------------------------------- #
lapply(Packages, library, character.only = TRUE)
source("../source/_helper_func.R")
# ----------------------------------------------------------- #
# Read matlab files into R
# ----------------------------------------------------------- #
dataSetHFpEF <- readMat('data_use_HFpEF.mat')
dataSetHFmrEF <- readMat('data_use_HFmrEF.mat')
# ----------------------------------------------------------- #
# Extract the data matrix from matlab files
# ----------------------------------------------------------- #
HFpEFmat <- dataSetHFpEF$All.data
HFmrEFmat <- dataSetHFmrEF$All.data
# ----------------------------------------------------------- #
# Get patient ids
# ----------------------------------------------------------- #
patientIdHFpEF <- dataSetHFpEF$patientID
patientIdHFmrEF <- dataSetHFmrEF$patientID
# ----------------------------------------------------------- #
# Add patient ids to HF_matrices and all column names
# ----------------------------------------------------------- #
HFpEFmat <- cbind(patientIdHFpEF, HFpEFmat)
HFmrEFmat <- cbind(patientIdHFmrEF, HFmrEFmat)
colnames(HFpEFmat) <- c('patientid', as.vector(unlist(
dataSetHFpEF$Varnames)))
colnames(HFmrEFmat) <- c('patientid', as.vector(unlist(
dataSetHFmrEF$Varnames)))
# ----------------------------------------------------------- #
# Consolidate naming conventions for some variables
# ----------------------------------------------------------- #
# In the HFpEF matrix
# ----------------------------------------------------------- #
setnames(as.data.frame(HFpEFmat),
old = c("E_e","LVfunction", "ECGRhythm_other",
"ECGQRS_other", "Other_ethnicity", "Plt",
"COPD"),
new = c("Ee", "LVEF", "ECGRhythmother", "ECGQRSother",
"Otherethnicity", "Plts", "COPDasthma"))
# ----------------------------------------------------------- #
# In the HFmrEF matrix
# ----------------------------------------------------------- #
setnames(as.data.frame(HFmrEFmat),
old=c("Admissionweight","BMI","Numberofcomorbidities",
"Afrocaribbean", "Caucasian","Pulse","NtproBNP",
"E", "ECGRhythm_other", "LVHand_orLAE",
"ECGQRS_other", "iron", "Timetoadmission"),
new = c("admissionwgt","BmIadmission","comorbidities",
"Black","White","pulse","NTproBNP", "Ewave",
"ECGRhythmother", "LVHandorLAE",
"ECGQRSother", "Ironlevels", "TimetoHFadm"))
# ----------------------------------------------------------- #
# Lowercase letters for all the colnames
# ----------------------------------------------------------- #
colnames(HFpEFmat) <- tolower(colnames(HFpEFmat))
colnames(HFmrEFmat) <- tolower(colnames(HFmrEFmat))
# ----------------------------------------------------------- #
# Rename dupblicate names in variables af and ar
# ----------------------------------------------------------- #
if(all(colnames(HFmrEFmat)[c(3,5)] == c("af", "ar"))){
colnames(HFmrEFmat)[c(3,5)] <- c("a-fib", "ai")
}
# ----------------------------------------------------------- #
if(all(colnames(HFpEFmat)[c(4,8)] == c("af", "ar"))){
colnames(HFpEFmat)[c(4,8)] <- c("a-fib", "ai")
}
# ----------------------------------------------------------- #
# Address error in HFmrEF - lvef data point nr. 1
# ----------------------------------------------------------- #
HFmrEFmat[1, "lvef"] <- 40.45
# ----------------------------------------------------------- #
# Replace NaN values with NA using the make_na function
# ----------------------------------------------------------- #
HFpEFmat <- make.na(HFpEFmat)
HFmrEFmat <- make.na(HFmrEFmat)
# ----------------------------------------------------------- #
# Store indicator and non-indicator variables in seperate
# variables using the rm_indicator function
# ----------------------------------------------------------- #
HFpEFrmInd <- rm.indicator(HFpEFmat, n.uniq = 5)
HFmrEFrmInd <- rm.indicator(HFmrEFmat, n.uniq = 5)
# ----------------------------------------------------------- #
# Store the non-indicator variables for later
# ----------------------------------------------------------- #
HFpEFmatNoInd <- HFpEFrmInd$non.indicator
HFmrEFmatNoInd <- HFmrEFrmInd$non.indicator
# ----------------------------------------------------------- #
# Store the indicator variables for later
# ----------------------------------------------------------- #
HFpEFmatInd <- HFpEFrmInd$indicator
HFmrEFmatInd <- HFmrEFrmInd$indicator
# ----------------------------------------------------------- #
# Move some variables between matrices
# ----------------------------------------------------------- #
# Change RVfunction from non-indicator to indicator variable
# ----------------------------------------------------------- #
HFpEFrv <- move.columns(HFpEFmatNoInd, HFpEFmatInd,
"rvfunction")
HFpEFmatInd <- HFpEFrv$to.mat
HFpEFmatNoInd <- HFpEFrv$from.mat
# ----------------------------------------------------------- #
HFmrEFrv <- move.columns(HFmrEFmatNoInd, HFmrEFmatInd,
"rvfunction")
HFmrEFmatInd<- HFmrEFrv$to.mat
HFmrEFmatNoInd <- HFmrEFrv$from.mat
# ----------------------------------------------------------- #
# Change BmIadmission from indicator variable to non_indicator
# variable
# ----------------------------------------------------------- #
HFmrEFbmi <- move.columns(HFmrEFmatInd, HFmrEFmatNoInd,
"bmiadmission")
HFmrEFmatInd <- HFmrEFbmi$from.mat
HFmrEFmatNoInd <- HFmrEFbmi$to.mat
# ----------------------------------------------------------- #
# Change nyhaclass from non-indicator to indicator variable
# ----------------------------------------------------------- #
HFpEFnyhaClass <- move.columns(HFpEFmatNoInd, HFpEFmatInd,
"nyhaclass")
HFpEFmatInd <- HFpEFnyhaClass$to.mat
HFpEFmatNoInd <- HFpEFnyhaClass$from.mat
# ----------------------------------------------------------- #
# Convert zeros to missings, the following variables are not to
# be converted.
# ----------------------------------------------------------- #
notZerosHFpEF <- c("comorbidities", "weightchange",
"daysfollowupdischarge", "timetonextadm")
notZerosHFmrEF <- c("numbercomorditiesnoida","comorbidities",
"timetoadmission", "timetoecho",
"timetofollowupfrombnp",
"timetofollowupfromdischarge",
"timetofirstcardiachospitalisation")
HFpEFmatNoInd <- zero.to.na(HFpEFmatNoInd, notZerosHFpEF)
HFmrEFmatNoInd <- zero.to.na(HFmrEFmatNoInd, notZerosHFmrEF)
# ----------------------------------------------------------- #
# Concatinate the indicator and non-indicator variables
# ----------------------------------------------------------- #
HFpEFmat <- cbind(HFpEFmatNoInd, HFpEFmatInd)
HFmrEFmat <- cbind(HFmrEFmatNoInd, HFmrEFmatInd)
# ----------------------------------------------------------- #
# Save all matrices as .Rdat in data_files folder
# ----------------------------------------------------------- #
save(HFpEFmat,
file='../source/data_files/data_use_HFpEF.Rdat')
save(HFpEFmatInd,
file = '../source/data_files/HFpEF_ind_var.Rdat')
save(HFpEFmatNoInd,
file = '../source/data_files/HFpEF_not_ind.Rdat')
# ----------------------------------------------------------- #
save(HFmrEFmat,
file='../source/data_files/data_use_HFmrEF.Rdat')
save(HFmrEFmatInd,
file = '../source/data_files/HFmrEF_ind_var.Rdat')
save(HFmrEFmatNoInd,
file = '../source/data_files/HFmrEF_not_ind.Rdat')
# ----------------------------------------------------------- #
# Re-code patient group labels
# ----------------------------------------------------------- #
# Get patient groups
# ----------------------------------------------------------- #
patientGroupsHFpEF <- as.matrix(unlist(
dataSetHFpEF$Patient.group))
patientGroupsHFmrEF <- as.matrix(unlist(
dataSetHFmrEF$Patient.group))
# ----------------------------------------------------------- #
# Labels of clinical outcomes
# ----------------------------------------------------------- #
deceased <- c("IN", "Z", "Y", "X")
reAdmission <- c("V", "U")
# ----------------------------------------------------------- #
# Split labels
# ----------------------------------------------------------- #
HFpEFsplit <- str_split_fixed(patientGroupsHFpEF,", ", n = 2)
HFmrEFsplit <- str_split_fixed(patientGroupsHFmrEF,", ",n = 2)
# ----------------------------------------------------------- #
# Re-coding mortality labels
# ----------------------------------------------------------- #
isDeceasedHFpEF <- HFpEFsplit[,1] %in% deceased
isDeceasedHFmrEF <- HFmrEFsplit[,1] %in% deceased
deceasedHFpEF <- ifelse(isDeceasedHFpEF, "yes", "no")
deceasedHFmrEF <- ifelse(isDeceasedHFmrEF, "yes", "no")
# ----------------------------------------------------------- #
# Re-coding re-admission labels
# ----------------------------------------------------------- #
isReAdmittedHFpEF <- HFpEFsplit[,1] %in% reAdmission |
HFpEFsplit[,2] %in% reAdmission
isReAdmittedHFmrEF <- HFmrEFsplit[,1] %in% reAdmission |
HFmrEFsplit[,2] %in% reAdmission
reAdmissionHFpEF <- ifelse(isReAdmittedHFpEF,"yes","no")
reAdmissionHFmrEF <- ifelse(isReAdmittedHFmrEF,"yes","no")
# ----------------------------------------------------------- #
# Add outcomes to matrix
# ----------------------------------------------------------- #
HFpEFoutcomes <- cbind(patientIdHFpEF, patientGroupsHFpEF,
deceasedHFpEF, reAdmissionHFpEF)
HFmrEFoutcomes <- cbind(patientIdHFmrEF, patientGroupsHFmrEF,
deceasedHFmrEF, reAdmissionHFmrEF)
# ----------------------------------------------------------- #
# Add colnames to matrices
# ----------------------------------------------------------- #
colnames(HFpEFoutcomes) <- colnames(HFmrEFoutcomes) <-
c("patientid", "patientgroup", "deceased", "readmitted")
# ----------------------------------------------------------- #
# Save the matrices as .Rdat file
# ----------------------------------------------------------- #
save(HFpEFoutcomes,
file='../source/data_files/outcomes_HFpEF.Rdat')
save(HFmrEFoutcomes,
file='../source/data_files/outcomes_HFmrEF.Rdat')
# ----------------------------------------------------------- #
# Create one file with all the common variables in both
# HFpEF and HFmrEF data sets.
# ----------------------------------------------------------- #
# Find common columns in both data sets
# ----------------------------------------------------------- #
HFpEFcol <- colnames(HFpEFmat) %in% colnames(HFmrEFmat)
HFmrEFcol <- colnames(HFmrEFmat) %in% colnames(HFpEFmat)
# ----------------------------------------------------------- #
HFpEFsame <- HFpEFmat[, HFpEFcol]
HFmrEFsame  <- HFmrEFmat[, HFmrEFcol]
rm(HFpEFcol, HFmrEFcol)
# ----------------------------------------------------------- #
# Sort columns
# ----------------------------------------------------------- #
HFpEFsame <- HFpEFsame[, sort(colnames(HFpEFsame[,-1]))]
HFmrEFsame <- HFmrEFsame[, sort(colnames(HFmrEFsame[,-1]))]
# ----------------------------------------------------------- #
# Create syndrome class matrix
# ----------------------------------------------------------- #
syndrome <- rep(c(2, 1),
times = c(nrow(HFpEFmat), nrow(HFmrEFmat)))
# ----------------------------------------------------------- #
# Add patient id, create full data set and syndrome classes
# ----------------------------------------------------------- #
HFfullDataSet <- rbind(HFpEFsame, HFmrEFsame)
id <- seq(1, nrow(HFfullDataSet))
HFfullDataSet <- as.data.frame(cbind(id, HFfullDataSet))
SyndClass <- as.data.frame(cbind(id, syndrome))
# ----------------------------------------------------------- #
# Save full data set
# ----------------------------------------------------------- #
save(HFfullDataSet,
file='../source/data_files/HF_full_data_set.Rdat')
save(SyndClass,
file='../source/data_files/syndromes_HF_full.Rdat')
# ----------------------------------------------------------- #
