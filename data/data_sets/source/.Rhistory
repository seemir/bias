<<<<<<< HEAD
test <- dat[-index, ]
# Fitting
model <- glm(syndrome~.,family=binomial,data=train)
# Predict results
results_prob <- predict(model, test, type='response')
# If prob > 0.5 then 1, else 0
results <- ifelse(results_prob > 0.5,1,0)
# Actual answers
answers <- test$syndrome
# Accuracy calculation
misClasificError <- mean(answers != results)
# Collecting results
acc[i] <- 1-misClasificError
# Confusion matrix
cm <- confusionMatrix(data=results, reference=answers)
fpr[i] <- cm$table[2]/(nrow(dat)-smp_size)
fnr[i] <- cm$table[3]/(nrow(dat)-smp_size)
pbar$step()
}
seq_len
syndrome <- ifelse(SyndClass[-328, 2]==2, 1, 0)
dat <- cbind(syndrome, HFfullImpDataSet[-328,])
fpr <- NULL # False positive rate
fnr <- NULL # False negative rate
k <- 500 # Number of iterations
# Accuracy
acc <- NULL
for(i in 1:k)
{
# Train-test splitting
# 95% of samples -> fitting
# 5% of samples -> testing
smp_size <- floor(0.95 * nrow(dat))
index <- sample(seq_len(nrow(dat)),size=smp_size)
train <- dat[index, ]
test <- dat[-index, ]
# Fitting
model <- glm(syndrome~.,family=binomial,data=train)
# Predict results
results_prob <- predict(model, subset(test,select=c(2:55)), type='response')
# If prob > 0.5 then 1, else 0
results <- ifelse(results_prob > 0.5,1,0)
# Actual answers
answers <- test$syndrome
# Accuracy calculation
misClasificError <- mean(answers != results)
# Collecting results
acc[i] <- 1-misClasificError
# Confusion matrix
cm <- confusionMatrix(data=results, reference=answers)
fpr[i] <- cm$table[2]/(nrow(dat)-smp_size)
fnr[i] <- cm$table[3]/(nrow(dat)-smp_size)
pbar$step()
}
View(dat)
library(caret)
library(plyr)
syndrome <- ifelse(SyndClass[-328, 2]==2, 1, 0)
dat <- cbind(syndrome, HFfullImpDataSet[-328,])
dat <- dat[, 1:28]
fpr <- NULL # False positive rate
fnr <- NULL # False negative rate
k <- 500 # Number of iterations
# Accuracy
acc <- NULL
for(i in 1:k)
{
# Train-test splitting
# 95% of samples -> fitting
# 5% of samples -> testing
smp_size <- floor(0.95 * nrow(dat))
index <- sample(seq_len(nrow(dat)), size=smp_size)
train <- dat[index, ]
test <- dat[-index, ]
# Fitting
model <- glm(syndrome~.,family=binomial,data=train)
# Predict results
results_prob <- predict(model, subset(test, select=c(2:55)),
type='response')
# If prob > 0.5 then 1, else 0
results <- ifelse(results_prob > 0.5, 1, 0)
# Actual answers
answers <- test$syndrome
# Accuracy calculation
misClasificError <- mean(answers != results)
# Collecting results
acc[i] <- 1-misClasificError
# Confusion matrix
cm <- confusionMatrix(data=results, reference=answers)
fpr[i] <- cm$table[2]/(nrow(dat)-smp_size)
fnr[i] <- cm$table[3]/(nrow(dat)-smp_size)
pbar$step()
}
syndrome <- ifelse(SyndClass[-328, 2]==2, 1, 0)
dat <- cbind(syndrome, HFfullImpDataSet[-328,])
fpr <- NULL # False positive rate
fnr <- NULL # False negative rate
k <- 500 # Number of iterations
# Accuracy
acc <- NULL
for(i in 1:k)
{
# Train-test splitting
# 95% of samples -> fitting
# 5% of samples -> testing
smp_size <- floor(0.95 * nrow(dat))
index <- sample(seq_len(nrow(dat)), size=smp_size)
train <- dat[index, ]
test <- dat[-index, ]
# Fitting
model <- glm(syndrome~.,family=binomial,data=train)
# Predict results
results_prob <- predict(model, subset(test, select=c(2:55)),
type='response')
# If prob > 0.5 then 1, else 0
results <- ifelse(results_prob > 0.5, 1, 0)
# Actual answers
answers <- test$syndrome
# Accuracy calculation
misClasificError <- mean(answers != results)
# Collecting results
acc[i] <- 1-misClasificError
# Confusion matrix
cm <- confusionMatrix(data=results, reference=answers)
fpr[i] <- cm$table[2]/(nrow(dat)-smp_size)
fnr[i] <- cm$table[3]/(nrow(dat)-smp_size)
pbar$step()
}
syndrome <- ifelse(SyndClass[-328, 2]==2, 1, 0)
dat <- cbind(syndrome, HFfullpca$scores[-328,])
fpr <- NULL # False positive rate
fnr <- NULL # False negative rate
k <- 500 # Number of iterations
# Accuracy
acc <- NULL
for(i in 1:k)
{
# Train-test splitting
# 95% of samples -> fitting
# 5% of samples -> testing
smp_size <- floor(0.95 * nrow(dat))
index <- sample(seq_len(nrow(dat)), size=smp_size)
train <- dat[index, ]
test <- dat[-index, ]
# Fitting
model <- glm(syndrome~.,family=binomial,data=train)
# Predict results
results_prob <- predict(model, subset(test, select=c(2:55)),
type='response')
# If prob > 0.5 then 1, else 0
results <- ifelse(results_prob > 0.5, 1, 0)
# Actual answers
answers <- test$syndrome
# Accuracy calculation
misClasificError <- mean(answers != results)
# Collecting results
acc[i] <- 1-misClasificError
# Confusion matrix
cm <- confusionMatrix(data=results, reference=answers)
fpr[i] <- cm$table[2]/(nrow(dat)-smp_size)
fnr[i] <- cm$table[3]/(nrow(dat)-smp_size)
pbar$step()
}
syndrome <- ifelse(SyndClass[-328, 2]==2, 1, 0)
dat <- as.data.frame(cbind(syndrome, HFfullpca$scores[-328,]))
fpr <- NULL # False positive rate
fnr <- NULL # False negative rate
k <- 500 # Number of iterations
# Accuracy
acc <- NULL
for(i in 1:k)
{
# Train-test splitting
# 95% of samples -> fitting
# 5% of samples -> testing
smp_size <- floor(0.95 * nrow(dat))
index <- sample(seq_len(nrow(dat)), size=smp_size)
train <- dat[index, ]
test <- dat[-index, ]
# Fitting
model <- glm(syndrome~.,family=binomial,data=train)
# Predict results
results_prob <- predict(model, subset(test, select=c(2:55)),
type='response')
# If prob > 0.5 then 1, else 0
results <- ifelse(results_prob > 0.5, 1, 0)
# Actual answers
answers <- test$syndrome
# Accuracy calculation
misClasificError <- mean(answers != results)
# Collecting results
acc[i] <- 1-misClasificError
# Confusion matrix
cm <- confusionMatrix(data=results, reference=answers)
fpr[i] <- cm$table[2]/(nrow(dat)-smp_size)
fnr[i] <- cm$table[3]/(nrow(dat)-smp_size)
pbar$step()
}
library(caret)
library(plyr)
syndrome <- ifelse(SyndClass[-328, 2]==2, 1, 0)
dat <- as.data.frame(cbind(syndrome, HFfullpca$scores[-328,]))
fpr <- NULL # False positive rate
fnr <- NULL # False negative rate
k <- 500 # Number of iterations
# Accuracy
acc <- NULL
for(i in 1:k)
{
# Train-test splitting
# 95% of samples -> fitting
# 5% of samples -> testing
smp_size <- floor(0.95 * nrow(dat))
index <- sample(seq_len(nrow(dat)), size=smp_size)
train <- dat[index, ]
test <- dat[-index, ]
# Fitting
model <- glm(syndrome~.,family=binomial,data=train)
# Predict results
results_prob <- predict(model, subset(test, select=c(2:55)),
type='response')
# If prob > 0.5 then 1, else 0
results <- ifelse(results_prob > 0.5, 1, 0)
# Actual answers
answers <- as.factor(test$syndrome)
# Accuracy calculation
misClasificError <- mean(answers != results)
# Collecting results
acc[i] <- 1-misClasificError
# Confusion matrix
cm <- confusionMatrix(data=results, reference=answers)
fpr[i] <- cm$table[2]/(nrow(dat)-smp_size)
fnr[i] <- cm$table[3]/(nrow(dat)-smp_size)
pbar$step()
}
syndrome <- ifelse(SyndClass[-328, 2]==2, 1, 0)
dat <- as.data.frame(cbind(syndrome, HFfullpca$scores[-328,]))
fpr <- NULL # False positive rate
fnr <- NULL # False negative rate
k <- 500 # Number of iterations
# Accuracy
acc <- NULL
for(i in 1:k)
{
# Train-test splitting
# 95% of samples -> fitting
# 5% of samples -> testing
smp_size <- floor(0.95 * nrow(dat))
index <- sample(seq_len(nrow(dat)), size=smp_size)
train <- dat[index, ]
test <- dat[-index, ]
# Fitting
model <- glm(syndrome~.,family=binomial,data=train)
# Predict results
results_prob <- predict(model, subset(test, select=c(2:55)),
type='response')
# If prob > 0.5 then 1, else 0
results <- as.factor(ifelse(results_prob > 0.5, 1, 0))
# Actual answers
answers <- as.factor(test$syndrome)
# Accuracy calculation
misClasificError <- mean(answers != results)
# Collecting results
acc[i] <- 1-misClasificError
# Confusion matrix
cm <- confusionMatrix(data=results, reference=answers)
fpr[i] <- cm$table[2]/(nrow(dat)-smp_size)
fnr[i] <- cm$table[3]/(nrow(dat)-smp_size)
pbar$step()
}
library(caret)
library(plyr)
syndrome <- ifelse(SyndClass[-328, 2]==2, 1, 0)
dat <- as.data.frame(cbind(syndrome, HFfullpca$scores[-328,]))
fpr <- NULL # False positive rate
fnr <- NULL # False negative rate
k <- 500 # Number of iterations
# Accuracy
acc <- NULL
for(i in 1:k)
{
# Train-test splitting
# 95% of samples -> fitting
# 5% of samples -> testing
smp_size <- floor(0.95 * nrow(dat))
index <- sample(seq_len(nrow(dat)), size=smp_size)
train <- dat[index, ]
test <- dat[-index, ]
# Fitting
model <- glm(syndrome~.,family=binomial,data=train)
# Predict results
results_prob <- predict(model, subset(test, select=c(2:55)),
type='response')
# If prob > 0.5 then 1, else 0
results <- as.factor(ifelse(results_prob > 0.5, 1, 0))
# Actual answers
answers <- as.factor(test$syndrome)
# Accuracy calculation
misClasificError <- mean(answers != results)
# Collecting results
acc[i] <- 1-misClasificError
# Confusion matrix
cm <- confusionMatrix(data=results, reference=answers)
fpr[i] <- cm$table[2]/(nrow(dat)-smp_size)
fnr[i] <- cm$table[3]/(nrow(dat)-smp_size)
}
acc
mean(acc[acc != 1])
# Histogram of accuracy
hist(acc,xlab='Accuracy',ylab='Freq',
col='cyan',border='blue',density=30)
# Boxplot of accuracy
boxplot(acc,col='cyan',border='blue',horizontal=T,xlab='Accuracy',
main='Accuracy CV')
# Confusion matrix and plots of fpr and fnr
mean(fpr)
mean(fnr)
hist(fpr,xlab='% of fnr',ylab='Freq',main='FPR',
col='cyan',border='blue',density=30)
hist(fnr,xlab='% of fnr',ylab='Freq',main='FNR',
col='cyan',border='blue',density=30)
hist(acc,xlab='Accuracy',ylab='Freq',
col='cyan',border='blue',density=30)
boxplot(acc,col='cyan',border='blue',horizontal=T,xlab='Accuracy',
main='Accuracy CV')
mean(fpr)
mean(fnr)
hist(fpr,xlab='% of fnr',ylab='Freq',main='FPR',
col='cyan',border='blue',density=30)
hist(fnr,xlab='% of fnr',ylab='Freq',main='FNR',
col='cyan',border='blue',density=30)
?seq_len
par(mfcol=c(1,2))
# Histogram of accuracy
hist(acc,xlab='Accuracy',ylab='Freq',
col='cyan',border='blue',density=30)
# Boxplot of accuracy
boxplot(acc,col='cyan',border='blue',horizontal=T,xlab='Accuracy',
main='Accuracy CV')
acc <- acc[acc != 1]
mean(acc)
par(mfcol=c(1,2))
# Histogram of accuracy
hist(acc,xlab='Accuracy',ylab='Freq',
col='cyan',border='blue',density=30)
# Boxplot of accuracy
boxplot(acc,col='cyan',border='blue',horizontal=T,xlab='Accuracy',
main='Accuracy CV')
hist(acc,xlab='Accuracy',ylab='Freq',
col='cyan',border='blue',density=30)
boxplot(acc,col='cyan',border='blue',horizontal=T,xlab='Accuracy',
main='Accuracy CV')
syndrome <- ifelse(SyndClass[-328, 2]==2, 1, 0)
dat <- as.data.frame(cbind(syndrome, HFfullpca[-328,]))
fpr <- NULL # False positive rate
fnr <- NULL # False negative rate
k <- 500 # Number of iterations
# Accuracy
acc <- NULL
for(i in 1:k)
{
# Train-test splitting
# 95% of samples -> fitting
# 5% of samples -> testing
smp_size <- floor(0.95 * nrow(dat))
index <- sample(seq_len(nrow(dat)), size=smp_size)
train <- dat[index, ]
test <- dat[-index, ]
# Fitting
model <- glm(syndrome~.,family=binomial,data=train)
# Predict results
results_prob <- predict(model, subset(test, select=c(2:55)),
type='response')
# If prob > 0.5 then 1, else 0
results <- as.factor(ifelse(results_prob > 0.5, 1, 0))
# Actual answers
answers <- as.factor(test$syndrome)
# Accuracy calculation
misClasificError <- mean(answers != results)
# Collecting results
acc[i] <- 1-misClasificError
# Confusion matrix
cm <- confusionMatrix(data=results, reference=answers)
fpr[i] <- cm$table[2]/(nrow(dat)-smp_size)
fnr[i] <- cm$table[3]/(nrow(dat)-smp_size)
}
acc <- acc[acc != 1]
mean(acc)
par(mfcol=c(1,2))
# Histogram of accuracy
hist(acc,xlab='Accuracy',ylab='Freq',
col='cyan',border='blue',density=30)
# Boxplot of accuracy
boxplot(acc,col='cyan',border='blue',horizontal=T,xlab='Accuracy',
main='Accuracy CV')
hist(acc,xlab='Accuracy',ylab='Freq',
col='cyan',border='blue',density=30, breaks = 20)
hist(acc,xlab='Accuracy',ylab='Freq',
col='cyan',border='blue',density=30, breaks = 10)
hist(acc,xlab='Accuracy',ylab='Freq',
col='cyan',border='blue',density=30, breaks = 10)
Packages <- c("Amelia", "mice")
lapply(Packages, library, character.only = TRUE)
load("data_files/HF_full_data_set.Rdat")
load("data_files/syndromes_HF_full.Rdat")
source("_helper_func.R")
top.n.missing(HFfullDataSet, 10)
HFfullRmInd <- rm.indicator(HFfullDataSet, 8)
HFfullInd <- HFfullRmInd$indicator
HFfullNoInd <- HFfullRmInd$non.indicator
bnd <- data.bounds(HFfullNoInd[, -1], 0, Inf)
HFfullEm <- boot.em.impute(HFfullNoInd[, -1], bnd, n.boot = 5)
HFfullCart <- complete(mice(HFfullInd, method = "cart"))
HFfullImpDataSet <- cbind(HFfullEm, HFfullCart)
HFfullpca <- princomp(HFfullImpDataSet, cor = T)
pca.var.plot(HFfullpca, 41, title = "HF same variables")
pca.cluster.plot(HFfullpca, 41, hc.clust = 2, ellipse = F)
HFfullpca <- princomp(HFfullImpDataSet[-328, ], cor = T)
ClustPlot <- pca.cluster.plot(HFfullpca, 41, ellipse = F,
hc.clust = 2)
# ----------------------------------------------------------- #
# Install packages (if not already installed)
# ----------------------------------------------------------- #
Packages <- c("Amelia", "mice")
# install.packages(Packages)
# ----------------------------------------------------------- #
# Load package for docstring
# ----------------------------------------------------------- #
lapply(Packages, library, character.only = TRUE)
# ----------------------------------------------------------- #
# Load data set with same variables and source helper functions
# ----------------------------------------------------------- #
load("data_files/HF_full_data_set.Rdat")
load("data_files/syndromes_HF_full.Rdat")
source("_helper_func.R")
# ----------------------------------------------------------- #
# Summary of missing variables
# ----------------------------------------------------------- #
top.n.missing(HFfullDataSet, 10)
# ----------------------------------------------------------- #
# Split variables into indicator and categorical variables
# ----------------------------------------------------------- #
HFfullRmInd <- rm.indicator(HFfullDataSet, 8)
HFfullInd <- HFfullRmInd$indicator
HFfullNoInd <- HFfullRmInd$non.indicator
# ----------------------------------------------------------- #
# Impute data using Bootstrap EM and CART
# ----------------------------------------------------------- #
bnd <- data.bounds(HFfullNoInd[, -1], 0, Inf)
HFfullEm <- boot.em.impute(HFfullNoInd[, -1], bnd, n.boot = 10)
HFfullCart <- complete(mice(HFfullInd, method = "cart"))
HFfullImpDataSet <- cbind(HFfullEm, HFfullCart)
HFfullpca <- princomp(HFfullImpDataSet, cor = T)
pca.var.plot(HFfullpca, 41, title = "HF same variables")
pca.cluster.plot(HFfullpca, 41, hc.clust = 2, ellipse = F)
HFfullImpDataSet <- cbind(HFfullEm, HFfullCart)
HFfullpca <- princomp(HFfullImpDataSet, cor = T)
pca.var.plot(HFfullpca, 41, title = "HF same variables")
pca.cluster.plot(HFfullpca, 41, hc.clust = 2, ellipse = F)
pca.cluster.plot(HFfullpca, 41, hc.clust = 2,
actual = SyndClass[-328, 2])
HFfullpca <- princomp(HFfullImpDataSet[-328, ], cor = T)
ClustPlot <- pca.cluster.plot(HFfullpca, 41, ellipse = F,
hc.clust = 2)
pca.cluster.plot(HFfullpca, 41, hc.clust = 2,
actual = SyndClass[-328, 2])
library(caret)
library(plyr)
syndrome <- ifelse(SyndClass[-328, 2]==2, 1, 0)
dat <- as.data.frame(cbind(syndrome, HFfullpca[-328,]))
syndrome <- ifelse(SyndClass[-328, 2]==2, 1, 0)
dat <- as.data.frame(cbind(syndrome, HFfullpca[-328,]))
dat <- as.data.frame(cbind(syndrome, HFfullpca))
dat <- as.data.frame(cbind(syndrome, HFfullpca$scores))
fpr <- NULL # False positive rate
fnr <- NULL # False negative rate
k <- 500 # Number of iterations
acc <- NULL
for(i in 1:k)
{
# Train-test splitting
# 95% of samples -> fitting
# 5% of samples -> testing
smp_size <- floor(0.95 * nrow(dat))
index <- sample(seq_len(nrow(dat)), size=smp_size)
train <- dat[index, ]
test <- dat[-index, ]
# Fitting
model <- glm(syndrome~.,family=binomial,data=train)
# Predict results
results_prob <- predict(model, subset(test, select=c(2:55)),
type='response')
# If prob > 0.5 then 1, else 0
results <- as.factor(ifelse(results_prob > 0.5, 1, 0))
# Actual answers
answers <- as.factor(test$syndrome)
# Accuracy calculation
misClasificError <- mean(answers != results)
# Collecting results
acc[i] <- 1-misClasificError
# Confusion matrix
cm <- confusionMatrix(data=results, reference=answers)
fpr[i] <- cm$table[2]/(nrow(dat)-smp_size)
fnr[i] <- cm$table[3]/(nrow(dat)-smp_size)
}
acc <- acc[acc != 1]
mean(acc)
top.n.missing(HFfullDataSet, 10)
pca.cluster.plot(HFfullpca, 41, hc.clust = 2, ellipse = F)
pca.cluster.plot(HFfullpca, 41, hc.clust = 2,
actual = SyndClass[-328, 2])
mean(acc)
=======
>>>>>>> 52652e75911db05d3e77722d682d4a3b1192ec2e
