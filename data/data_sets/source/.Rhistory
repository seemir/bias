lda = fitLDAKfoldMort,
nb = fitNbKfoldMort,
svm = fitSvmKfoldMort,
rf = fitRfKfoldMort))
dotplot(resultsMortalityKfold, main = "Mortality")
fitKnnKfoldMort
fitLLKfoldMort
fitLDAKfoldMort
fitNbKfoldMort
fitSvmKfoldMort
fitRfKfoldMort
# ----------------------------------------------------------- #
# Install relevant packages (if not already done)
# ----------------------------------------------------------- #
Packages <- c("mlbench", "caret", "elasticnet", "klaR",
"xtable", "tikzDevice")
# install.packages(Packages)
# ----------------------------------------------------------- #
# Load relevant packages
# ----------------------------------------------------------- #
lapply(Packages, library, character.only = TRUE)
source("utilities.R")
# ----------------------------------------------------------- #
# Load data files
# ----------------------------------------------------------- #
allDataFiles <- c("HFfullImp", "HFfullOutcomes")
lapply(gsub(" ", "", paste("data_files/", allDataFiles,
".Rdat")), load,.GlobalEnv)
# ----------------------------------------------------------- #
# Add cross validation configuration
# ----------------------------------------------------------- #
kfold <- trainControl(method = "cv", number = 100)
seed <- 902109
metric <- "Accuracy"
preProcess <- "pca"
# ----------------------------------------------------------- #
# Train and evaluate the classification algorithms with kfold
# ----------------------------------------------------------- #
dataset <- HFfullImp[,-1]
mortality <- HFfullOutcomes[,3]
readmission <- HFfullOutcomes[,4]
# ----------------------------------------------------------- #
# Mortality
# ----------------------------------------------------------- #
# kfold CV evaluation of classifiers
# ----------------------------------------------------------- #
set.seed(seed)
fitKnnKfoldMort <- train(dataset, mortality, method="knn",
metric=metric, trControl=kfold,
preProcess = preProcess)
set.seed(seed)
fitLLKfoldMort <- train(dataset, mortality, method = "glm",
metric=metric, trControl = kfold,
preProcess = preProcess)
set.seed(seed)
fitLDAKfoldMort <- train(dataset, mortality, method = "lda",
metric = metric, trControl = kfold,
preProcess = preProcess)
set.seed(seed)
fitNbKfoldMort <- train(dataset, mortality, method = "nb",
metric = metric, trControl = kfold,
preProcess = preProcess)
set.seed(seed)
fitSvmKfoldMort <- train(dataset, mortality,method="svmRadial",
metric=metric, trControl=kfold,
preProcess = preProcess)
set.seed(seed)
fitRfKfoldMort <- train(dataset, mortality, method="rf",
metric = metric, trControl = kfold,
preProcess = preProcess)
# ----------------------------------------------------------- #
# Produce summary statistics and plots
# ----------------------------------------------------------- #
# Kfold CV
# ----------------------------------------------------------- #
resultsMortalityKfold <- resamples(list(knn = fitKnnKfoldMort,
logr = fitLLKfoldMort,
lda = fitLDAKfoldMort,
nb = fitNbKfoldMort,
svm = fitSvmKfoldMort,
rf = fitRfKfoldMort))
dotplot(resultsMortalityKfold, main = "Mortality")
summary(resultsMortalityKfold)
# ----------------------------------------------------------- #
# Install relevant packages (if not already done)
# ----------------------------------------------------------- #
Packages <- c("mlbench", "caret", "elasticnet", "klaR",
"xtable", "tikzDevice")
# install.packages(Packages)
# ----------------------------------------------------------- #
# Load relevant packages
# ----------------------------------------------------------- #
lapply(Packages, library, character.only = TRUE)
source("utilities.R")
# ----------------------------------------------------------- #
# Load data files
# ----------------------------------------------------------- #
allDataFiles <- c("HFfullImp", "HFfullOutcomes")
lapply(gsub(" ", "", paste("data_files/", allDataFiles,
".Rdat")), load,.GlobalEnv)
# ----------------------------------------------------------- #
# Add cross validation configuration
# ----------------------------------------------------------- #
kfold <- trainControl(method = "cv", number = 10)
seed <- 0123456789
metric <- "Accuracy"
preProcess <- "pca"
# ----------------------------------------------------------- #
# Train and evaluate the classification algorithms with kfold
# ----------------------------------------------------------- #
dataset <- HFfullImp[,-1]
mortality <- HFfullOutcomes[,3]
readmission <- HFfullOutcomes[,4]
# ----------------------------------------------------------- #
# Mortality
# ----------------------------------------------------------- #
# kfold CV evaluation of classifiers
# ----------------------------------------------------------- #
set.seed(seed)
fitKnnKfoldMort <- train(dataset, mortality, method="knn",
metric=metric, trControl=kfold,
preProcess = preProcess)
set.seed(seed)
fitLLKfoldMort <- train(dataset, mortality, method = "glm",
metric=metric, trControl = kfold,
preProcess = preProcess)
set.seed(seed)
fitLDAKfoldMort <- train(dataset, mortality, method = "lda",
metric = metric, trControl = kfold,
preProcess = preProcess)
set.seed(seed)
fitNbKfoldMort <- train(dataset, mortality, method = "nb",
metric = metric, trControl = kfold,
preProcess = preProcess)
set.seed(seed)
fitSvmKfoldMort <- train(dataset, mortality,method="svmRadial",
metric=metric, trControl=kfold,
preProcess = preProcess)
set.seed(seed)
fitRfKfoldMort <- train(dataset, mortality, method="rf",
metric = metric, trControl = kfold,
preProcess = preProcess)
# ----------------------------------------------------------- #
# Produce summary statistics and plots
# ----------------------------------------------------------- #
# Kfold CV
# ----------------------------------------------------------- #
resultsMortalityKfold <- resamples(list(knn = fitKnnKfoldMort,
logr = fitLLKfoldMort,
lda = fitLDAKfoldMort,
nb = fitNbKfoldMort,
svm = fitSvmKfoldMort,
rf = fitRfKfoldMort))
dotplot(resultsMortalityKfold, main = "Mortality")
summary(resultsMortalityKfold)
set.seed(seed)
fitKnnKfoldReadm <- train(dataset, readmission, method="knn",
metric=metric, trControl=kfold,
preProcess = preProcess)
set.seed(seed)
fitLLKfoldReadm <- train(dataset, readmission, method = "glm",
metric=metric, trControl = kfold,
preProcess = preProcess)
set.seed(seed)
fitLDAKfoldReadm <- train(dataset, readmission,
method = "lda", metric = metric,
trControl = kfold,
preProcess = preProcess)
set.seed(seed)
fitNbKfoldReadm <- train(dataset, readmission, method = "nb",
metric = metric, trControl = kfold,
preProcess = preProcess)
set.seed(seed)
fitSvmKfoldReadm <- train(dataset, readmission,
method="svmRadial", metric=metric,
trControl=kfold,
preProcess = preProcess)
set.seed(seed)
fitRfKfoldReadm <- train(dataset, readmission, method="rf",
metric = metric, trControl = kfold,
preProcess = preProcess)
# ----------------------------------------------------------- #
# Produce summary statistics and plots
# ----------------------------------------------------------- #
# Kfold CV
# ----------------------------------------------------------- #
resultsReadmKfold <- resamples(list(knn = fitKnnKfoldReadm,
lda = fitLDAKfoldReadm,
nb = fitNbKfoldReadm,
logr = fitLLKfoldReadm,
svm = fitSvmKfoldReadm,
rf = fitRfKfoldReadm))
dotplot(resultsReadmKfold, main = "Re-admission")
summary(resultsMortalityKfold)
summary(resultsMortalityKfold)
# ----------------------------------------------------------- #
# Install relevant packages (if not already done)
# ----------------------------------------------------------- #
Packages <- c("mlbench", "caret", "elasticnet", "klaR",
"xtable", "tikzDevice")
# install.packages(Packages)
# ----------------------------------------------------------- #
# Load relevant packages
# ----------------------------------------------------------- #
lapply(Packages, library, character.only = TRUE)
source("utilities.R")
# ----------------------------------------------------------- #
# Load data files
# ----------------------------------------------------------- #
allDataFiles <- c("HFfullImp", "HFfullOutcomes")
lapply(gsub(" ", "", paste("data_files/", allDataFiles,
".Rdat")), load,.GlobalEnv)
# ----------------------------------------------------------- #
# Add cross validation configuration
# ----------------------------------------------------------- #
kfold <- trainControl(method = "cv", number = 10)
seed <- 0123456789
metric <- "Accuracy"
preProcess <- "pca"
# ----------------------------------------------------------- #
# Train and evaluate the classification algorithms with kfold
# ----------------------------------------------------------- #
dataset <- HFfullImp[,-1]
mortality <- HFfullOutcomes[,3]
readmission <- HFfullOutcomes[,4]
# ----------------------------------------------------------- #
# Mortality
# ----------------------------------------------------------- #
# kfold CV evaluation of classifiers
# ----------------------------------------------------------- #
set.seed(seed)
fitKnnKfoldMort <- train(dataset, mortality, method="knn",
metric=metric, trControl=kfold,
preProcess = preProcess)
set.seed(seed)
fitLLKfoldMort <- train(dataset, mortality, method = "glm",
metric=metric, trControl = kfold,
preProcess = preProcess)
set.seed(seed)
fitLDAKfoldMort <- train(dataset, mortality, method = "lda",
metric = metric, trControl = kfold,
preProcess = preProcess)
set.seed(seed)
fitNbKfoldMort <- train(dataset, mortality, method = "nb",
metric = metric, trControl = kfold,
preProcess = preProcess)
set.seed(seed)
fitSvmKfoldMort <- train(dataset, mortality,method="svmRadial",
metric=metric, trControl=kfold,
preProcess = preProcess)
set.seed(seed)
fitRfKfoldMort <- train(dataset, mortality, method="rf",
metric = metric, trControl = kfold,
preProcess = preProcess)
# ----------------------------------------------------------- #
# Produce summary statistics and plots
# ----------------------------------------------------------- #
# Kfold CV
# ----------------------------------------------------------- #
resultsMortalityKfold <- resamples(list(knn = fitKnnKfoldMort,
logr = fitLLKfoldMort,
lda = fitLDAKfoldMort,
nb = fitNbKfoldMort,
svm = fitSvmKfoldMort,
rf = fitRfKfoldMort))
xtable(summary(resultsMortalityKfold)$statistics$Accuracy,
digits = 3)
xtable(summary(resultsMortalityKfold)$statistics$Kappa,
digits = 3)
pathToImages <- "../../../doc/thesis/images/"
tikz(file=paste(pathToImages,"classificationMortality.tex",
sep = ""), height = 5.5, standAlone = F)
dotplot(resultsMortalityKfold, main = "Mortality")
dev.off()
# ----------------------------------------------------------- #
# Readmission
# ----------------------------------------------------------- #
# kfold CV evaluation of classifiers
# ----------------------------------------------------------- #
set.seed(seed)
fitKnnKfoldReadm <- train(dataset, readmission, method="knn",
metric=metric, trControl=kfold,
preProcess = preProcess)
set.seed(seed)
fitLLKfoldReadm <- train(dataset, readmission, method = "glm",
metric=metric, trControl = kfold,
preProcess = preProcess)
set.seed(seed)
fitLDAKfoldReadm <- train(dataset, readmission,
method = "lda", metric = metric,
trControl = kfold,
preProcess = preProcess)
set.seed(seed)
fitNbKfoldReadm <- train(dataset, readmission, method = "nb",
metric = metric, trControl = kfold,
preProcess = preProcess)
set.seed(seed)
fitSvmKfoldReadm <- train(dataset, readmission,
method="svmRadial", metric=metric,
trControl=kfold,
preProcess = preProcess)
set.seed(seed)
fitRfKfoldReadm <- train(dataset, readmission, method="rf",
metric = metric, trControl = kfold,
preProcess = preProcess)
# ----------------------------------------------------------- #
# Produce summary statistics and plots
# ----------------------------------------------------------- #
# Kfold CV
# ----------------------------------------------------------- #
resultsReadmKfold <- resamples(list(knn = fitKnnKfoldReadm,
lda = fitLDAKfoldReadm,
nb = fitNbKfoldReadm,
logr = fitLLKfoldReadm,
svm = fitSvmKfoldReadm,
rf = fitRfKfoldReadm))
xtable(summary(resultsReadmKfold)$statistics$Accuracy,
digits = 3)
xtable(summary(resultsReadmKfold)$statistics$Kappa,
digits = 3)
pathToImages <- "../../../doc/thesis/images/"
tikz(file=paste(pathToImages,"classificationReadmission.tex",
sep = ""), height = 5.5, standAlone = F)
dotplot(resultsReadmKfold, main = "Re-admission")
dev.off()
# ----------------------------------------------------------- #
xtable(summary(resultsMortalityKfold)$statistics$Accuracy,
digits = 3)
xtable(summary(resultsMortalityKfold)$statistics$Kappa,
digits = 3)
xtable(summary(resultsMortalityKfold)$statistics$Accuracy,
digits = 3)
xtable(summary(resultsMortalityKfold)$statistics$Kappa,
digits = 3)
xtable(summary(resultsReadmKfold)$statistics$Accuracy,
digits = 3)
xtable(summary(resultsReadmKfold)$statistics$Kappa,
digits = 3)
# ----------------------------------------------------------- #
# Install relevant packages (if not already done)
# ----------------------------------------------------------- #
Packages <- c("mlbench", "caret", "elasticnet", "klaR",
"xtable", "tikzDevice")
# install.packages(Packages)
# ----------------------------------------------------------- #
# Load relevant packages
# ----------------------------------------------------------- #
lapply(Packages, library, character.only = TRUE)
source("utilities.R")
# ----------------------------------------------------------- #
# Load data files
# ----------------------------------------------------------- #
allDataFiles <- c("HFfullImp", "HFfullOutcomes")
lapply(gsub(" ", "", paste("data_files/", allDataFiles,
".Rdat")), load,.GlobalEnv)
# ----------------------------------------------------------- #
# Add cross validation configuration
# ----------------------------------------------------------- #
kfold <- trainControl(method = "cv", number = 10)
seed <- 0123456789
metric <- "Accuracy"
preProcess <- "pca"
# ----------------------------------------------------------- #
# Train and evaluate the classification algorithms with kfold
# ----------------------------------------------------------- #
dataset <- HFfullImp[,-1]
mortality <- HFfullOutcomes[,3]
readmission <- HFfullOutcomes[,4]
# ----------------------------------------------------------- #
# Mortality
# ----------------------------------------------------------- #
# kfold CV evaluation of classifiers
# ----------------------------------------------------------- #
set.seed(seed)
fitKnnKfoldMort <- train(dataset, mortality, method="knn",
metric=metric, trControl=kfold,
preProcess = preProcess)
set.seed(seed)
fitLLKfoldMort <- train(dataset, mortality, method = "glm",
metric=metric, trControl = kfold,
preProcess = preProcess)
set.seed(seed)
fitLDAKfoldMort <- train(dataset, mortality, method = "lda",
metric = metric, trControl = kfold,
preProcess = preProcess)
set.seed(seed)
fitNbKfoldMort <- train(dataset, mortality, method = "nb",
metric = metric, trControl = kfold,
preProcess = preProcess)
set.seed(seed)
fitSvmKfoldMort <- train(dataset, mortality,method="svmRadial",
metric=metric, trControl=kfold,
preProcess = preProcess)
set.seed(seed)
fitRfKfoldMort <- train(dataset, mortality, method="rf",
metric = metric, trControl = kfold,
preProcess = preProcess)
# ----------------------------------------------------------- #
# Produce summary statistics and plots
# ----------------------------------------------------------- #
# Kfold CV
# ----------------------------------------------------------- #
resultsMortalityKfold <- resamples(list(knn = fitKnnKfoldMort,
logr = fitLLKfoldMort,
lda = fitLDAKfoldMort,
nb = fitNbKfoldMort,
svm = fitSvmKfoldMort,
rf = fitRfKfoldMort))
xtable(summary(resultsMortalityKfold)$statistics$Accuracy,
digits = 3)
xtable(summary(resultsMortalityKfold)$statistics$Kappa,
digits = 3)
dotplot(resultsMortalityKfold, main = "Mortality")
bwtplot(resultsMortalityKfold, main = "Mortality")
bwplot(resultsMortalityKfold, main = "Mortality")
# ----------------------------------------------------------- #
# Install relevant packages (if not already done)
# ----------------------------------------------------------- #
Packages <- c("reporttools", "VIM", "Hmisc", "xtable",
"tikzDevice")
# install.packages(Packages)
# ----------------------------------------------------------- #
# Load relevant packages and source helper functions
# ----------------------------------------------------------- #
lapply(Packages, library, character.only = T)
source("utilities.R")
# ----------------------------------------------------------- #
# Load HFpEF and HFmrEF datafiles
# ----------------------------------------------------------- #
path <- "data_files/"; r <- ".Rdat"
fileNames <- c("HFpEFdataSet", "HFmrEFdataSet",
"HFpEFoutcomes", "HFmrEFoutcomes",
"HFfullDataSet", "HFfullOutcomes")
lapply(gsub(" ", "", paste(path, fileNames, r)),
load,.GlobalEnv)
aggr(HFpEFdataSet, plot = T, sortVars = T,
bars = F, combined = T, ylabs = "", cex.axis = 0.7)
aggr(HFmrEFdataSet, plot = T,
sortVars = T, bars = F, combined = T, ylabs = "",
cex.axis = 0.7)
nameOrder <- c("age", "gender", "white", "asian", "black",
"breathless", "sbp", "dbp", "admissionwgt",
"bp", "bmiadmission", "pulse", "afib",
"copdasthma", "irondef", "dm", "obesity",
"copdasthma", "ihd", "comorbidities",
"ecgqrsduration", "ecgqrsother", "ecgrate",
"ecgrhythmother", "lvh", "normalecgqrs", "lbbb",
"rbbb", "sr", "hb", "wbc", "tsat", "plts","pcv",
"ferritin", "k", "ironlevels", "chol",
"ntprobnp", "gfr", "mcv", "na", "lvef", "ewave",
"pasp", "ee", "mr", "tr", "as", "ai",
"rvfunction", "af", "timetohfadm",
"hfhospitalisation", "los")
# ----------------------------------------------------------- #
# Descriptive statistics
# ----------------------------------------------------------- #
capHFpEF <- "Patient characteristics: HFpEF"
labHFpEF <- "tab:desc_stat_HFpEF"
tableContinuous(HFpEFdataSet[, nameOrder],
stats = c("n", "na", "min", "max", "mean",
"median", "s", "q1", "q3"),
cap = capHFpEF, lab = labHFpEF)
# ----------------------------------------------------------- #
capHFmrEF <- "Patient characteristics: HFmrEF"
labHFmrEF <- "tab:desc_stat_HFmrEF"
tableContinuous(HFmrEFdataSet[, nameOrder],
stats = c("n", "na", "min", "max", "mean",
"median", "s", "q1", "q3"),
cap = capHFmrEF, lab = labHFmrEF)
# ----------------------------------------------------------- #
# Outcomes table
# ----------------------------------------------------------- #
r <- rep("", 5)
tabOutHFfull <- rbind(label.summary(as.matrix(HFfullOutcomes),
2, cbind("Group", "Mort?", "Readm?", "n",
"%Tot"), 3, 5))
tabOutHFpEF <- rbind(label.summary(as.matrix(HFpEFoutcomes),
2, c("Group", "Mort?", "Readm?", "n",
"% Tot"), 3, 5), r, r)
tabOutHFmrEF <- label.summary(as.matrix(HFmrEFoutcomes),
2, c("Group", "Mort?", "Readm?",
"n", "% Tot"), 3, 5)
print(xtable(tabOutHFfull), include.rownames = F)
print(xtable(cbind(tabOutHFpEF, tabOutHFmrEF)),
include.rownames = F)
# ----------------------------------------------------------- #
# Tables of top 10 missing values variables in both data sets
# ----------------------------------------------------------- #
HFfullMiss <- top.n.missing(HFfullDataSet, 10)
HFpEFmiss <- top.n.missing(HFpEFdataSet, 10)
HFmrEFmiss <- top.n.missing(HFmrEFdataSet, 10)
# ----------------------------------------------------------- #
# Combine missing values table and convert to Latex code
# ----------------------------------------------------------- #
xtable(HFfullMiss, digits = c(0,0,3,3,3))
xtable(cbind(round(HFpEFmiss,3), rownames(HFmrEFmiss),
round(HFmrEFmiss,3)))
# ----------------------------------------------------------- #
# ----------------------------------------------------------- #
# Function for sourcing package info
# ----------------------------------------------------------- #
source_lines <- function(file, lines){
source(textConnection(readLines(file, warn = F)[lines]))
}
packages <- c()
files <- c("utilities.R", "desc_stat.R", "pre_process.R",
"clustering.R", "classification.R",
"../raw_data/consolidation.R")
for (file in files){
source_lines(file, 1:10)
packages <- c(packages, Packages)
}
