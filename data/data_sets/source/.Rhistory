# ----------------------------------------------------------- #
HFpEFrv <- move.columns(HFpEFmatNoInd, HFpEFmatInd,
"rvfunction")
HFpEFmatInd <- HFpEFrv$to.mat
HFpEFmatNoInd <- HFpEFrv$from.mat
# ----------------------------------------------------------- #
HFmrEFrv <- move.columns(HFmrEFmatNoInd, HFmrEFmatInd,
"rvfunction")
HFmrEFmatInd<- HFmrEFrv$to.mat
HFmrEFmatNoInd <- HFmrEFrv$from.mat
# ----------------------------------------------------------- #
# Change BmIadmission from indicator variable to non_indicator
# variable
# ----------------------------------------------------------- #
HFmrEFbmi <- move.columns(HFmrEFmatInd, HFmrEFmatNoInd,
"bmiadmission")
HFmrEFmatInd <- HFmrEFbmi$from.mat
HFmrEFmatNoInd <- HFmrEFbmi$to.mat
# ----------------------------------------------------------- #
# Change nyhaclass from non-indicator to indicator variable
# ----------------------------------------------------------- #
HFpEFnyhaClass <- move.columns(HFpEFmatNoInd, HFpEFmatInd,
"nyhaclass")
HFpEFmatInd <- HFpEFnyhaClass$to.mat
HFpEFmatNoInd <- HFpEFnyhaClass$from.mat
# ----------------------------------------------------------- #
# Convert zeros to missings, the following variables are not to
# be converted.
# ----------------------------------------------------------- #
notZerosHFpEF <- c("comorbidities", "weightchange",
"daysfollowupdischarge", "timetonextadm")
notZerosHFmrEF <- c("numbercomorditiesnoida","comorbidities",
"timetoadmission", "timetoecho",
"timetofollowupfrombnp",
"timetofollowupfromdischarge",
"timetofirstcardiachospitalisation")
HFpEFmatNoInd <- zero.to.na(HFpEFmatNoInd, notZerosHFpEF)
HFmrEFmatNoInd <- zero.to.na(HFmrEFmatNoInd, notZerosHFmrEF)
# ----------------------------------------------------------- #
# Plot of missing values distribution
# ----------------------------------------------------------- #
pathToImages <- "../../../doc/thesis/images/"
pdf(file=paste(c(pathToImages,"HFpEF_miss_dist.pdf"),
collapse = ""))
aggr(cbind(HFpEFmatNoInd, HFpEFmatInd), plot = T, sortVars = T,
bars = F, combined = T, ylabs = "", cex.axis = 0.7)
dev.off()
pdf(file = paste(c(pathToImages, "HFmrEF_miss_dist.pdf"),
collapse = ""))
aggr(cbind(HFmrEFmatNoInd, HFmrEFmatInd), plot = T,
sortVars = T, bars = F, combined = T, ylabs = "",
cex.axis = 0.7)
dev.off()
# ----------------------------------------------------------- #
# Summary of variables
# ----------------------------------------------------------- #
# Reorder data matrix by phenotype domains
# ----------------------------------------------------------- #
# In HFpEF matrix
# ----------------------------------------------------------- #
idHFpEF <- c("patientid")
demoHFpEF <- c("age", "gender", "white", "asian", "black",
"otherethnicity")
admSympHFpEF <- c("breathless", "chestpain", "orthopnoea",
"peripheraloedema", "palpdizzyfalls",
"pnd")
admSignHFpEF <- c("sbp", "dbp", "map", "admissionwgt",
"height", "bmiadmission", "weightchange",
"admissionsbnp", "pulse", "bp",
"asympthf", "devicetherapy")
riskFactHFpEF <- c("a-fib", "copdasthma", "irondef",
"obesity", "obesitybmi30", "nyhaclass",
"dm","ihd", "osa")
comorHFpEF <- c("comorbidities")
ecgHFpEF <- c( "ecgblock","ecgblockcomment","ecgqrsduration",
"ecgqrsother","ecgrate","ecgrhythmother","twi",
"lvh","normalecgqrs", "lbbb", "rbbb", "lvhlev",
"sr")
labTestHFpEF <- c("albumin", "hb", "hba1c", "wbc", "tsat",
"glucose", "plts", "pcv", "ferritin",
"k", "ironlevels", "chol", "ntprobnp",
"gfr", "mcv", "na")
echoHFpEF <- c("lvef","ewave", "pasp", "tapse", "ea", "ee",
"laterals", "mr", "tr", "as", "awave",
"dilatedlv", "ladiameter", "ai", "laarea",
"raarea", "rwma", "calculatede", "rvfunction",
"edeceltime", "af")
outcomesHFpEF <- c("alive", "timefromprevadm", "timetohfadm",
"timetonextadm", "daysfollowupdischarge",
"hfhospitalisation", "daysfollowupbnp",
"los")
# ----------------------------------------------------------- #
# In HFmrEF matrix
# ----------------------------------------------------------- #
idHFmrEF <- c("patientid")
demoHFmrEF <- c("age", "gender", "white", "asian", "black",
"other", "mixed")
admSympHFmrEF <- c("breathless", "st")
admSignHFmrEF <- c("sbp", "dbp", "admissionwgt", "bp",
"bmiadmission", "pulse", "sympthf",
"symptlvhf", "symptlvunder",
"symptomatichfmref", "pathway")
riskFactHFmrEF <- c("a-fib", "copdasthma", "irondef", "dm",
"obesity", "copdasthma", "ihd",
"ar", "both", "cva", "sb", "procedures")
comorHFmrEF <- c("comorbidities", "numbercomorditiesnoida")
ecgHFmrEF <- c("ecgqrsduration", "ecgqrsother", "ecgrate",
"ecgrhythmother", "lvh", "normalecgqrs","nsr",
"lbbb", "rbbb", "sr")
labTestHFmrEF <- c("hb", "wbc", "tsat", "plts", "pcv","crp",
"ferritin", "k", "ironlevels", "chol",
"ntprobnp", "gfr","mcv","na","troponin")
echoHFmrEF <- c("lvef","ewave", "pasp", "ee", "mr", "tr",
"as", "ai", "rvfunction", "checkedee",
"timetoecho", "ee13diastolic", "af",
"eagroup", "edecelgroup", "finalla",
"lvhgroup", "lvhandorlae", "e9cms")
outcomesHFmrEF <- c("timetohfadm", "hfhospitalisation",
"los", "dischargeweight", "cardiachosp",
"truehf", "timetofollowupfromdischarge",
"timetofirstcardiachospitalisation",
"timetofollowupfrombnp", "newhf")
# ----------------------------------------------------------- #
# Long descriptive statistics
# ----------------------------------------------------------- #
dsHFpEFnames <- c(idHFpEF, demoHFpEF, admSympHFpEF,
admSignHFpEF, riskFactHFpEF,
comorHFpEF, ecgHFpEF, labTestHFpEF,
echoHFpEF, outcomesHFpEF)
dsHFmrEFnames <- c(idHFmrEF, demoHFmrEF, admSympHFmrEF,
admSignHFmrEF, riskFactHFmrEF,
comorHFmrEF, ecgHFmrEF, labTestHFmrEF,
echoHFmrEF, outcomesHFmrEF)
# ----------------------------------------------------------- #
dfHFpEF <- as.data.frame(HFpEFmat[,dsHFpEFnames])
capDescHFpEF <- "Patient characteristics: HFpEF variables"
labDescHFpEF <- "tab:desc_stat_HFpEF_variables"
tableContinuous(dfHFpEF, stats = c("n", "na", "min", "max",
"mean", "median", "s", "q1",
"q3"), cap = capDescHFpEF,
lab = labDescHFpEF)
# ----------------------------------------------------------- #
dfHFmrEF <- as.data.frame(HFmrEFmat[,dsHFmrEFnames])
capDescHFmrEF <- "Patient characteristics: HFmrEF variables"
labDescHFmrEF <- "tab:desc_stat_HFmrEF_variables"
tableContinuous(dfHFmrEF, stats = c("n", "na", "min", "max",
"mean", "median", "s",
"q1", "q3"),
cap = capDescHFmrEF, lab = labDescHFmrEF)
# ----------------------------------------------------------- #
# Outcomes table
# ----------------------------------------------------------- #
load("../raw_data/outcomes_HFpEF.Rdat")
load("../raw_data/outcomes_HFmrEF.Rdat")
r <- rep("", 5)
tabOutHFpEF <- rbind(label.summary(HFpEFoutcomes, 2,
c("Group", "Dead?",
"Readm?", "n", "% Tot"),
3, 5), r, r)
tabOutHFmrEF <- label.summary(HFmrEFoutcomes,
2, c("Group", "Dead?", "Readm?",
"n", "% Tot"), 3, 5)
print(xtable(cbind(tabOutHFpEF, tabOutHFmrEF)),
include.rownames = F)
# ----------------------------------------------------------- #
# Tables of top 10 missing values variables in both data sets
# ----------------------------------------------------------- #
# In HFpEF
# ----------------------------------------------------------- #
HFpEFmiss <- top.n.missing(cbind(HFpEFmatInd,
HFpEFmatNoInd), 10)
# ----------------------------------------------------------- #
# In HFmrEF
# ----------------------------------------------------------- #
HFmrEFmiss <- top.n.missing(cbind(HFmrEFmatInd,
HFmrEFmatNoInd),10)
# ----------------------------------------------------------- #
# Combine missing values table and convert to Latex code
# ----------------------------------------------------------- #
xtable(cbind(round(HFpEFmiss,3), rownames(HFmrEFmiss),
round(HFmrEFmiss,3)))
# ----------------------------------------------------------- #
# Save indicator variables and non indicator variables
# for later imputation
# ----------------------------------------------------------- #
save(HFpEFmatInd, file="data_files/HFpEF_ind_var.Rdat")
save(HFmrEFmatInd, file="data_files/HFmrEF_ind_var.Rdat")
save(HFpEFmatNoInd, file="data_files/HFpEF_not_ind.Rdat")
save(HFmrEFmatNoInd, file="data_files/HFmrEF_not_ind.Rdat")
# ----------------------------------------------------------- #
Packages <- c("BaylorEdPsych", "mvnmle", "xtable", "Amelia",
"rlist", "mice", "caret")
lapply(Packages, library, character.only = TRUE)
source("_helper_func.R")
allDataFiles <- c("HFpEF_ind_var", "HFmrEF_ind_var",
"HFpEF_not_ind", "HFmrEF_not_ind")
lapply(gsub(" ", "", paste("data_files/", allDataFiles,
".Rdat")), load,.GlobalEnv)
View(HFpEFmatInd)
HFpEFind <- HFpEFmatInd
HFpEFind <- HFpEFind[, !colnames(HFpEFind) %in%
c("osa", "obesitybmi30")]
HFpEFcon <- HFpEFmatNoInd
HFpEFlis <- list(HFpEFind, HFpEFcon[,2:15], HFpEFcon[,16:33],
HFpEFcon[,34:47])
HFpEFmcar <- do.call(rbind, lapply(HFpEFlis, little.mcar))
HFpEFmcarNames <- c("indicator", "continuous_1",
"continuous_2", "continuous_3")
rownames(HFpEFmcar) <- HFpEFmcarNames
HFpEFmcar
HFmrEFind <- HFmrEFmatInd
HFmrEFind <- HFmrEFind[, !colnames(HFmrEFind) %in%
c("cva", "e9cms")]
HFmrEFcon <- HFmrEFmatNoInd
HFmrEFcon <- HFmrEFcon[, !colnames(HFmrEFcon) %in%
c("bmiadmission",
"dischargeweight",
"admissionwgt",
"procedures", "troponin",
"timetofirstcardiachospitalisation",
"ferritin")]
HFmrEFlis <- list(HFmrEFind, HFmrEFcon[,2:15],
HFmrEFcon[,16:30])
HFmrEFmcar <- do.call(rbind, lapply(HFmrEFlis, little.mcar))
HFmrEFmcarNames <- c("indicator", "continuous_1",
"continuous_2")
rownames(HFmrEFmcar) <- HFmrEFmcarNames
HFmrEFmcar
xtable(rbind(HFpEFmcar, HFmrEFmcar), digits = c(0,0,0,4,0,5))
m <- 20 # number of bootstrap samples
HFpEFconImpEmlis <- list()
HFmrEFconImpEmlis <- list()
for (i in 1:m){
print(paste("Bootstrap: ", i, " ", i/m*100,"% ",sep =""))
HFpEFconImpEmlis[[i]] <- list.cbind(lapply(lapply(lapply(
HFpEFlis[2:4], amelia, m = 1, boot.type="none", p2s = 0)
,"[[", 1), "[[", 1))
HFmrEFconImpEmlis[[i]] <- list.cbind(lapply(lapply(lapply(
HFmrEFlis[2:3], amelia, m = 1, boot.type="none", p2s = 0),
"[[", 1), "[[", 1))
}
HFpEFconImpEm <- Reduce("+", HFpEFconImpEmlis) / m
HFmrEFconImpEm <- Reduce("+", HFmrEFconImpEmlis) / m
Packages <- c("BaylorEdPsych", "mvnmle", "xtable", "Amelia",
"rlist", "mice", "caret")
install.packages(Packages)
install.packages(Packages)
m <- 20 # number of bootstrap samples
HFpEFconImpEmlis <- list()
HFmrEFconImpEmlis <- list()
for (i in 1:m){
print(paste("Bootstrap: ", i, " ", i/m*100,"% ",sep =""))
HFpEFconImpEmlis[[i]] <- list.cbind(lapply(lapply(lapply(
HFpEFlis[2:4], amelia, m = 1, boot.type="none", p2s = 0)
,"[[", 1), "[[", 1))
HFmrEFconImpEmlis[[i]] <- list.cbind(lapply(lapply(lapply(
HFmrEFlis[2:3], amelia, m = 1, boot.type="none", p2s = 0),
"[[", 1), "[[", 1))
}
HFpEFconImpEm <- Reduce("+", HFpEFconImpEmlis) / m
HFmrEFconImpEm <- Reduce("+", HFmrEFconImpEmlis) / m
lapply(Packages, library, character.only = TRUE)
m <- 20 # number of bootstrap samples
HFpEFconImpEmlis <- list()
HFmrEFconImpEmlis <- list()
for (i in 1:m){
print(paste("Bootstrap: ", i, " ", i/m*100,"% ",sep =""))
HFpEFconImpEmlis[[i]] <- list.cbind(lapply(lapply(lapply(
HFpEFlis[2:4], amelia, m = 1, boot.type="none", p2s = 0)
,"[[", 1), "[[", 1))
HFmrEFconImpEmlis[[i]] <- list.cbind(lapply(lapply(lapply(
HFmrEFlis[2:3], amelia, m = 1, boot.type="none", p2s = 0),
"[[", 1), "[[", 1))
}
HFpEFconImpEm <- Reduce("+", HFpEFconImpEmlis) / m
HFmrEFconImpEm <- Reduce("+", HFmrEFconImpEmlis) / m
HFpEFindImpCart <- complete(mice(HFpEFind, method ="cart"))
HFmrEFindImpCart <- complete(mice(HFmrEFind,method ="cart"))
HFpEF <- cbind(HFpEFconImpEm, HFpEFindImpCart)
HFmrEF <- cbind(HFmrEFconImpEm, HFmrEFindImpCart)
View(HFpEF)
save(HFpEF, file = "data_files/HFpEF.Rdat")
save(HFmrEF, file = "data_files/HFmrEF.Rdat")
Packages <- c("tikzDevice")
lapply(Packages, library, character.only = TRUE)
source("_helper_func.R")
allDataFiles <- c("HFpEF", "HFmrEF")
lapply(gsub(" ", "", paste("data_files/", allDataFiles,
".Rdat")), load,.GlobalEnv)
HFpEFpca <- princomp(as.matrix(HFpEF), cor = T)
HFmrEFpca <- princomp(as.matrix(HFmrEF), cor = T)
pca.var.plot(HFpEFpca, 58, title = "HFpEF")
pca.var.plot(HFmrEFpca, 50, title = "HFmrEF")
pca.cluster.plot(HFpEFpca, ncp = 58)
pca.cluster.plot(HFmrEFpca, ncp = 50)
# ----------------------------------------------------------- #
# Install relevant packages (if not already done)
# ----------------------------------------------------------- #
Packages <- c("BaylorEdPsych", "mvnmle", "xtable", "Amelia",
"rlist", "mice", "caret")
# install.packages(Packages)
# ----------------------------------------------------------- #
# Load relevant packages
# ----------------------------------------------------------- #
lapply(Packages, library, character.only = TRUE)
source("_helper_func.R")
# ----------------------------------------------------------- #
# Load indicator and non indicator variables
# ----------------------------------------------------------- #
allDataFiles <- c("HFpEF_ind_var", "HFmrEF_ind_var",
"HFpEF_not_ind", "HFmrEF_not_ind")
lapply(gsub(" ", "", paste("data_files/", allDataFiles,
".Rdat")), load,.GlobalEnv)
# ----------------------------------------------------------- #
# Little's test to assess for missing completely at random
# Remove variables with more than 70% missing values
# ----------------------------------------------------------- #
# In HFpEF
# ----------------------------------------------------------- #
HFpEFind <- HFpEFmatInd
HFpEFind <- HFpEFind[, !colnames(HFpEFind) %in%
c("osa", "obesitybmi30")]
HFpEFcon <- HFpEFmatNoInd
HFpEFlis <- list(HFpEFind, HFpEFcon[,2:15], HFpEFcon[,16:33],
HFpEFcon[,34:47])
HFpEFmcar <- do.call(rbind, lapply(HFpEFlis, little.mcar))
# ----------------------------------------------------------- #
# Install relevant packages (if not already done)
# ----------------------------------------------------------- #
Packages <- c("BaylorEdPsych", "mvnmle", "xtable", "Amelia",
"rlist", "mice", "caret")
# install.packages(Packages)
# ----------------------------------------------------------- #
# Load relevant packages
# ----------------------------------------------------------- #
lapply(Packages, library, character.only = TRUE)
source("_helper_func.R")
# ----------------------------------------------------------- #
# Load indicator and non indicator variables
# ----------------------------------------------------------- #
allDataFiles <- c("HFpEF_ind_var", "HFmrEF_ind_var",
"HFpEF_not_ind", "HFmrEF_not_ind")
lapply(gsub(" ", "", paste("data_files/", allDataFiles,
".Rdat")), load,.GlobalEnv)
# ----------------------------------------------------------- #
# Little's test to assess for missing completely at random
# Remove variables with more than 70% missing values
# ----------------------------------------------------------- #
# In HFpEF
# ----------------------------------------------------------- #
HFpEFind <- HFpEFmatInd
HFpEFind <- HFpEFind[, !colnames(HFpEFind) %in%
c("osa", "obesitybmi30")]
HFpEFcon <- HFpEFmatNoInd
HFpEFlis <- list(HFpEFind, HFpEFcon[,2:15], HFpEFcon[,16:33],
HFpEFcon[,34:47])
HFpEFmcar <- do.call(rbind, lapply(HFpEFlis, little.mcar))
HFpEFmcarNames <- c("indicator", "continuous_1",
"continuous_2", "continuous_3")
rownames(HFpEFmcar) <- HFpEFmcarNames
# ----------------------------------------------------------- #
# In HFmrEF
# ----------------------------------------------------------- #
HFmrEFind <- HFmrEFmatInd
HFmrEFind <- HFmrEFind[, !colnames(HFmrEFind) %in%
c("cva", "e9cms")]
HFmrEFcon <- HFmrEFmatNoInd
HFmrEFcon <- HFmrEFcon[, !colnames(HFmrEFcon) %in%
c("bmiadmission",
"dischargeweight",
"admissionwgt",
"procedures", "troponin",
"timetofirstcardiachospitalisation",
"ferritin")]
HFmrEFlis <- list(HFmrEFind, HFmrEFcon[,2:15],
HFmrEFcon[,16:30])
HFmrEFmcar <- do.call(rbind, lapply(HFmrEFlis, little.mcar))
HFmrEFmcarNames <- c("indicator", "continuous_1",
"continuous_2")
rownames(HFmrEFmcar) <- HFmrEFmcarNames
xtable(rbind(HFpEFmcar, HFmrEFmcar), digits = c(0,0,0,4,0,5))
# ----------------------------------------------------------- #
# Impute missing values
# ----------------------------------------------------------- #
# Impute the non-indicator variables with the Bootstrap
# EM algorithm
# ----------------------------------------------------------- #
m <- 30 # number of bootstrap samples
HFpEFconImpEmlis <- list()
HFmrEFconImpEmlis <- list()
for (i in 1:m){
print(paste("Bootstrap: ", i, " ", i/m*100,"% ",sep =""))
HFpEFconImpEmlis[[i]] <- list.cbind(lapply(lapply(lapply(
HFpEFlis[2:4], amelia, m = 1, boot.type="none", p2s = 0)
,"[[", 1), "[[", 1))
HFmrEFconImpEmlis[[i]] <- list.cbind(lapply(lapply(lapply(
HFmrEFlis[2:3], amelia, m = 1, boot.type="none", p2s = 0),
"[[", 1), "[[", 1))
}
HFpEFconImpEm <- Reduce("+", HFpEFconImpEmlis) / m
HFmrEFconImpEm <- Reduce("+", HFmrEFconImpEmlis) / m
# ----------------------------------------------------------- #
# Impute the indicator variables with classification and
# regression trees algorithm
# ----------------------------------------------------------- #
HFpEFindImpCart <- complete(mice(HFpEFind, method ="cart"))
HFmrEFindImpCart <- complete(mice(HFmrEFind,method ="cart"))
# ----------------------------------------------------------- #
# Merge imputed data into one data file
# ----------------------------------------------------------- #
HFpEF <- cbind(HFpEFconImpEm, HFpEFindImpCart)
HFmrEF <- cbind(HFmrEFconImpEm, HFmrEFindImpCart)
# ----------------------------------------------------------- #
# Save the data files
# ----------------------------------------------------------- #
save(HFpEF, file = "data_files/HFpEF.Rdat")
save(HFmrEF, file = "data_files/HFmrEF.Rdat")
# ----------------------------------------------------------- #
# ----------------------------------------------------------- #
# Install packages (if not already installed)
# ----------------------------------------------------------- #
Packages <- c("tikzDevice")
# install.packages(Packages)
# ----------------------------------------------------------- #
# Load package for docstring
# ----------------------------------------------------------- #
lapply(Packages, library, character.only = TRUE)
source("_helper_func.R")
# ----------------------------------------------------------- #
# Load imputed data
# ----------------------------------------------------------- #
allDataFiles <- c("HFpEF", "HFmrEF")
lapply(gsub(" ", "", paste("data_files/", allDataFiles,
".Rdat")), load,.GlobalEnv)
# ----------------------------------------------------------- #
# Principal component analysis
# ----------------------------------------------------------- #
HFpEFpca <- princomp(as.matrix(HFpEF), cor = T)
HFmrEFpca <- princomp(as.matrix(HFmrEF), cor = T)
# ----------------------------------------------------------- #
# Explained variance plot
# ----------------------------------------------------------- #
tikz(file="../../../doc/thesis/images/pca_var_plot_HFpEF.tex",
width = 10, height = 9)
pca.var.plot(HFpEFpca, 58, title = "HFpEF")
dev.off()
tikz(file="../../../doc/thesis/images/pca_var_plot_HFmrEF.tex",
width = 10, height = 9)
pca.var.plot(HFmrEFpca, 50, title = "HFmrEF")
dev.off()
# ----------------------------------------------------------- #
pca.var.plot(HFpEFpca, 58, title = "HFpEF")
pca.var.plot(HFmrEFpca, 50, title = "HFmrEF")
# ----------------------------------------------------------- #
pca.cluster.plot(HFmrEFpca, ncp = 50)
# ----------------------------------------------------------- #
pca.cluster.plot(HFmrEFpca, ncp = 50, hc.clust = 3)
pca.var.plot(HFmrEFpca, 50, title = "HFmrEF")
pca.var.plot(HFmrEFpca, 49, title = "HFmrEF")
# ----------------------------------------------------------- #
pca.cluster.plot(HFmrEFpca, ncp = 49, hc.clust = 3)
pca.var.plot(HFmrEFpca, 49, title = "HFmrEF")
pca.var.plot(HFmrEFpca, 51, title = "HFmrEF")
# ----------------------------------------------------------- #
pca.cluster.plot(HFmrEFpca, ncp = 51, hc.clust = 3)
# ----------------------------------------------------------- #
pca.cluster.plot(HFmrEFpca, ncp = 52, hc.clust = 3)
# ----------------------------------------------------------- #
pca.cluster.plot(HFmrEFpca, ncp = 52)
pca.cluster.plot(HFmrEFpca, ncp = 52)
pca.var.plot(HFmrEFpca, 51, title = "HFmrEF")
pca.var.plot(HFmrEFpca, 52, title = "HFmrEF")
pca.var.plot(HFmrEFpca, 52, title = "HFmrEF")
pca.cluster.plot(HFmrEFpca, ncp = 52)
install.packages("NbClust")
install.packages("NbClust")
library(NbClust)
NbClust(HFmrEFpca$scores, method = "kmeans")
NbClust(HFmrEFpca$scores, distance = "euclidean",
min.nc = 2, max.nc = 10,
method = "kmeans", index ="all")
NbClust(HFmrEFpca$scores, distance = "euclidean",
min.nc = 2, max.nc = 10, method = "kmeans",
index ="all")
NbClust(HFmrEFpca$scores, diss = NULL, distance = "euclidean",
min.nc = 2, max.nc = 10, method = "kmeans",
index ="all")
NbClust(data = HFmrEFpca$scores, diss = NULL,
distance = "euclidean", min.nc = 2, max.nc = 10,
method = "kmeans", index ="all", )
HFmrEFpca$scores
class(HFmrEFpca$scores)
NbClust(data = as.data.frame(HFmrEFpca$scores), diss = NULL,
distance = "euclidean", min.nc = 2, max.nc = 10,
method = "kmeans", index ="all")
NbClust(data = as.data.frame(HFmrEFpca$scores), diss = NULL,
distance = "euclidean", min.nc = 2, max.nc = 10,
method = "kmeans", index ="all", alphaBeale = 0.1)
NbClust(as.data.frame(HFmrEFpca$scores),
distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans")
NbClust(as.data.frame(HFmrEFpca$scores[, 1:52]),
distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans")
pca.cluster.plot(HFmrEFpca, ncp = 52)
pca.cluster.plot(HFpEFpca, ncp = 58)
NbClust(as.data.frame(HFpEFpca$scores[, 1:58]),
distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans")
pca.cluster.plot(HFpEFpca, ncp = 58, km.clust = 3)
pca.var.plot(HFpEFpca, 58, title = "HFpEF")
pca.var.plot(HFpEFpca, 58, title = "HFpEF")
