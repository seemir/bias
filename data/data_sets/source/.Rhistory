# ----------------------------------------------------------- #
# Install relevant packages (if not already done)
# ----------------------------------------------------------- #
Packages <- c("mlbench")
# install.packages(Packages)
# ----------------------------------------------------------- #
# Load relevant packages
# ----------------------------------------------------------- #
lapply(Packages, library, character.only = TRUE)
source("utilities.R")
allDataFiles <- c("HFfullImp", "HFfullOutcomes")
allDataFiles <- c("HFfullImp", "HFfullOutcomes")
lapply(gsub(" ", "", paste("data_files/", allDataFiles,
".Rdat")), load,.GlobalEnv)
View(HFfullOutcomes)
View(HFfullImp)
# ----------------------------------------------------------- #
# Install relevant packages (if not already done)
# ----------------------------------------------------------- #
Packages <- c("mlbench", "caret")
# install.packages(Packages)
# ----------------------------------------------------------- #
# Load relevant packages
# ----------------------------------------------------------- #
lapply(Packages, library, character.only = TRUE)
source("utilities.R")
allDataFiles <- c("HFfullImp", "HFfullOutcomes")
lapply(gsub(" ", "", paste("data_files/", allDataFiles,
".Rdat")), load,.GlobalEnv)
rep <- 10
kfold <- trainControl(method = "repeatedcv", number = 5,
repeats = rep)
loocv <- trainControl(method = "repeatedcv", number = 1,
repeats = rep)
rep <- 10
kfold <- trainControl(method = "repeatedcv", number = 5,
repeats = rep)
loocv <- trainControl(method = "repeatedcv", number = 1,
repeats = rep)
seed <- 90210
seed <- 90210; metric <- "Accuracy"
rep <- 10
kfold <- trainControl(method = "repeatedcv", number = 5,
repeats = rep)
loocv <- trainControl(method = "repeatedcv", number = 1,
repeats = rep)
seed <- 90210; metric <- "Accuracy"
preProcess=c("center", "scale")
# ----------------------------------------------------------- #
data(PimaIndiansDiabetes)
View(PimaIndiansDiabetes)
# ----------------------------------------------------------- #
rm(PimaIndiansDiabetes)
View(HFfullImp)
# ----------------------------------------------------------- #
# Train the classification algorithms
# ----------------------------------------------------------- #
dataset <- HFfullImp[,-1]
View(dataset)
dataset <- HFfullImp[,-1]
fit.lasso <- train(diabetes~., data=dataset, method="glmnet",
metric=metric, preProc=c("center", "scale"),
trControl=kfold, alpha = 1)
View(HFfullOutcomes)
View(HFfullOutcomes)
View(HFfullOutcomes)
dataset <- HFfullImp[,-1]
mortality <- HFfullOutcomes[,3]
readmission <- HFfullOutcomes[,4]
fit.lasso <- train(mortality~., data=dataset, method="glmnet",
metric=metric, preProc=c("center", "scale"),
trControl=kfold, alpha = 1)
warnings()
fit.lasso <- train(mortality~., data=dataset, method="glmnet",
metric=metric, preProc=c("center", "scale"),
trControl=kfold, family="gaussian",
alpha = 1)
warnings()
fit.lasso <- train(mortality~., data=dataset, method="glmnet",
family="gaussian", alpha = 1,
metric=metric, preProc=c("center", "scale"),
trControl=kfold)
fit.knn <- train(mortality~., data=dataset, method="knn",
metric=metric, preProc=c("center", "scale"),
trControl=kfold)
fit.knn <- train(mortality~., data=dataset, method="knn",
metric=metric, preProc=c("center", "scale"),
trControl=kfold)
kfold <- trainControl(method = "repeatedcv", number = 5)
loocv <- trainControl(method = "repeatedcv", number = 1)
seed <- 90210; metric <- "Accuracy"
dataset <- HFfullImp[,-1]
mortality <- HFfullOutcomes[,3]
readmission <- HFfullOutcomes[,4]
fit.knn <- train(mortality~., data=dataset, method="knn",
metric=metric, preProc=c("center", "scale"),
trControl=kfold)
dataset
fit.glm <- train(mortality~., data=dataset, method="glm",
metric=metric, trControl=kfold)
mortality
dataset <- HFfullImp[,-1]
mortality <- as.vector(HFfullOutcomes[,3])
readmission <- as.vector(HFfullOutcomes[,4])
fit.glm <- train(mortality~., data=dataset, method="glm",
metric=metric, trControl=kfold)
kfold <- trainControl(method = "repeatedcv", number = 5,
classProbs = T)
loocv <- trainControl(method = "repeatedcv", number = 1,
classProbs = T)
seed <- 90210; metric <- "Accuracy"
dataset <- HFfullImp[,-1]
mortality <- as.vector(HFfullOutcomes[,3])
readmission <- as.vector(HFfullOutcomes[,4])
fit.knn <- train(diabetes~., data=dataset, method="knn",
metric=metric, preProc=c("center", "scale"),
trControl=kfold)
fit.knn <- train(mortality~., data=dataset, method="knn",
metric=metric, preProc=c("center", "scale"),
trControl=kfold)
kfold <- trainControl(method = "repeatedcv", number = 5,
classProbs = T)
kfold <- trainControl(method = "repeatedcv", number = 5,
classProbs = T)
loocv <- trainControl(method = "repeatedcv", number = 1,
classProbs = T)
seed <- 90210; metric <- "Accuracy"
dataset <- HFfullImp[,-1]
mortality <- as.vector(HFfullOutcomes[,3])
readmission <- as.vector(HFfullOutcomes[,4])
fit.knn <- train(mortality~., data=dataset, method="knn",
metric=metric, preProc=c("center", "scale"),
trControl=kfold)
kfold <- trainControl(method = "repeatedcv", number = 5,
classProbs = T)
loocv <- trainControl(method = "repeatedcv", number = 1,
classProbs = T)
seed <- 90210; metric <- "Accuracy"
# ----------------------------------------------------------- #
# Train the classification algorithms with kfold
# ----------------------------------------------------------- #
dataset <- HFfullImp[,-1]
mortality <- as.vector(HFfullOutcomes[,3])
readmission <- as.vector(HFfullOutcomes[,4])
fit.knn <- train(mortality~., data=dataset, method="knn",
metric=metric, preProc=c("center", "scale"),
trControl=kfold)
fit.lasso <- train(mortality~., data=dataset, method="glmnet",
metric=metric, preProc=c("center", "scale"),
trControl=kfold)
dataset <- HFfullImp
mortality <- as.vector(HFfullOutcomes[,3])
readmission <- as.vector(HFfullOutcomes[,4])
fit.lasso <- train(mortality~., data=dataset, method="glmnet",
metric=metric, preProc=c("center", "scale"),
trControl=kfold)
dataset <- HFfullImp[,-1]
mortality <- as.vector(HFfullOutcomes[,3])
readmission <- as.vector(HFfullOutcomes[,4])
fit.lasso <- train(mortality~., data=dataset, method="glmnet",
metric=metric, preProc=c("center", "scale"),
trControl=kfold)
kfold <- trainControl(method = "cv", number = 5,
classProbs = T)
loocv <- trainControl(method = "cv", number = 1,
classProbs = T)
seed <- 90210; metric <- "Accuracy"
# ----------------------------------------------------------- #
# Train the classification algorithms with kfold
# ----------------------------------------------------------- #
dataset <- HFfullImp[,-1]
mortality <- as.vector(HFfullOutcomes[,3])
readmission <- as.vector(HFfullOutcomes[,4])
fit.lasso <- train(mortality~., data=dataset, method="glmnet",
metric=metric, preProc=c("center", "scale"),
trControl=kfold)
fit.lasso <- train(mortality~., data=dataset, method="glmnet",
metric=metric, preProc="pca",
trControl=kfold)
View(dataset)
fit.lasso <- train(mortality~., data=dataset, method="knn",
metric=metric, preProc="pca",
trControl=kfold)
fit.knn <- train(mortality~., data=dataset, method="knn",
metric=metric, preProc="pca",
trControl=kfold)
dataset <- HFfullImp[,-1]
mortality <- HFfullOutcomes[,3]
readmission <- HFfullOutcomes[,4]
fit.knn <- train(mortality~., data=dataset, method="knn",
metric=metric, preProc="pca",
trControl=kfold)
# ----------------------------------------------------------- #
# Install relevant packages (if not already done)
# ----------------------------------------------------------- #
Packages <- c("mlbench", "caret")
# install.packages(Packages)
# ----------------------------------------------------------- #
# Load relevant packages
# ----------------------------------------------------------- #
lapply(Packages, library, character.only = TRUE)
source("utilities.R")
# ----------------------------------------------------------- #
# Load data files
# ----------------------------------------------------------- #
allDataFiles <- c("HFfullImp", "HFfullOutcomes")
lapply(gsub(" ", "", paste("data_files/", allDataFiles,
".Rdat")), load,.GlobalEnv)
# ----------------------------------------------------------- #
# Add cross validation configuration
# ----------------------------------------------------------- #
kfold <- trainControl(method = "cv", number = 5,
classProbs = T)
loocv <- trainControl(method = "cv", number = 1,
classProbs = T)
seed <- 90210; metric <- "Accuracy"
# ----------------------------------------------------------- #
# Train the classification algorithms with kfold
# ----------------------------------------------------------- #
dataset <- HFfullImp[,-1]
mortality <- HFfullOutcomes[,3]
readmission <- HFfullOutcomes[,4]
fit.knn <- train(mortality~., data=dataset, method="knn",
metric=metric, preProc="pca",
trControl=kfold)
fit.knn <- train(dataset, mortality, method="knn",
metric=metric, preProc="pca",
trControl=kfold)
fit.knn
kfold <- trainControl(method = "reaptedcv", number = 5,
classProbs = T)
kfold <- trainControl(method = "reaptedcv", number = 5,
repeats = 10, classProbs = T)
loocv <- trainControl(method = "cv", number = 1,
repeats = 10, classProbs = T)
seed <- 90210; metric <- "Accuracy"
# ----------------------------------------------------------- #
# Train the classification algorithms with kfold
# ----------------------------------------------------------- #
dataset <- HFfullImp[,-1]
mortality <- HFfullOutcomes[,3]
readmission <- HFfullOutcomes[,4]
fit.knn <- train(dataset, mortality, method="knn",
metric=metric, preProc="pca",
trControl=kfold)
kfold <- trainControl(method = "repeatedcv", number = 5,
repeats = 10, classProbs = T)
loocv <- trainControl(method = "repeatedcv", number = 1,
repeats = 10, classProbs = T)
seed <- 90210; metric <- "Accuracy"
# ----------------------------------------------------------- #
# Train the classification algorithms with kfold
# ----------------------------------------------------------- #
dataset <- HFfullImp[,-1]
mortality <- HFfullOutcomes[,3]
readmission <- HFfullOutcomes[,4]
fit.knn <- train(dataset, mortality, method="knn",
metric=metric, preProc="pca",
trControl=kfold)
fit.knn
rm(fit.knn)
fit.knn.loocv <- train(dataset, mortality, method="knn",
metric=metric, preProc="pca",
trControl=loocv)
loocv <- trainControl(method = "repeatedcv", number = 1,
repeats = 10, classProbs = T)
fit.knn.loocv <- train(dataset, mortality, method="knn",
metric=metric, preProc="pca",
trControl=loocv)
fit.knn.kfold <- train(dataset, mortality, method="knn",
metric=metric, preProc="pca",
trControl=kfold)
fit.knn.kfold
kfold <- trainControl(method = "repeatedcv", number = 9,
repeats = 10, classProbs = T)
loocv <- trainControl(method = "repeatedcv", number = 1,
repeats = 10, classProbs = T)
seed <- 90210; metric <- "Accuracy"
# ----------------------------------------------------------- #
# Train and evaluate the classification algorithms with kfold
# ----------------------------------------------------------- #
dataset <- HFfullImp[,-1]
mortality <- HFfullOutcomes[,3]
readmission <- HFfullOutcomes[,4]
# ----------------------------------------------------------- #
# kNN classifier
# ----------------------------------------------------------- #
fit.knn.kfold <- train(dataset, mortality, method="knn",
metric=metric, preProc="pca",
trControl=kfold)
fit.knn.kfold
kfold <- trainControl(method = "repeatedcv", number = 9,
classProbs = T)
fit.knn.kfold <- train(dataset, mortality, method="knn",
metric=metric, preProc="pca",
trControl=kfold)
fit.knn.kfold
loocv <- trainControl(method = "repeatedcv", number = 1,
classProbs = T)
seed <- 90210; metric <- "Accuracy"
dataset <- HFfullImp[,-1]
mortality <- HFfullOutcomes[,3]
readmission <- HFfullOutcomes[,4]
# ----------------------------------------------------------- #
# kNN classifier
# ----------------------------------------------------------- #
fit.knn.kfold <- train(dataset, mortality, method="knn",
metric=metric, preProc="pca",
trControl=kfold)
fit.knn.loocv <- train(dataset, mortality, method="knn",
metric=metric, preProc="pca",
trControl=loocv)
fit.svm.kfold <- train(dataset, mortality, method="svmRadial",
metric=metric, preProc="pca",
trControl=kfold, fit = F)
fit.svm.kfold
fit.lasso.kfold <- train(dataset, mortality, method="glmnet",
family = "gaussian", alpha = 1,
metric = metric, preProcess = "pca",
trControl = kfold)
warnings()
fit.lasso.kfold <- train(dataset, mortality, method="glmnet",
family = "gaussian", alpha = 1,
metric = metric, preProcess = "pca",
trControl = kfold)
fit.lasso.kfold <- train(dataset, mortality, method="glmnet",
family = "gaussian", alpha = 1,
tuneGrid=expand.grid(
.alpha=1,
.lambda=seq(0, 100, by = 0.1))
metric = metric, preProcess = "pca",
trControl = kfold)
fit.lasso.kfold <- train(dataset, mortality, method="glmnet",
family = "gaussian", alpha = 1,
tuneGrid=expand.grid(
.alpha=1,
.lambda=seq(0, 100, by = 0.1)),
metric = metric, preProcess = "pca",
trControl = kfold)
fit.lasso.kfold <- train(dataset, mortality, method="lasso",
family = "gaussian", alpha = 1,
metric = metric, preProcess = "pca",
trControl = kfold)
fit.lasso.kfold <- train(dataset, mortality, method="lasso",
tuneLength = 10, metric = metric,
preProcess = "pca", trControl = kfold)
fit.lasso.kfold <- train(dataset, mortality, method="lasso",
tuneLength = 10, metric = metric,
family="gaussian", alpha=1,
preProcess = "pca", trControl = kfold)
fit.lasso.kfold <- train(dataset, mortality, method="rf",
tuneLength = 10, metric = metric,
preProcess = "pca", trControl = kfold)
fit.lasso.kfold
fit.rf.kfold <- train(dataset, mortality, method="rf",
tuneLength = 10, metric = metric,
preProcess = "pca", trControl = kfold)
fit.rf.kfold <- train(dataset, mortality, method="rf",
metric = metric, preProcess = "pca",
trControl = kfold)
fit.rf.kfold
fit.knn.kfold <- train(dataset, mortality, method="knn",
metric=metric, preProc="pca",
trControl=kfold)
fit.knn.kfold
fit.svm.kfold
fit.knn.kfold
kfold <- trainControl(method = "repeatedcv", number = 10,
classProbs = T)
loocv <- trainControl(method = "repeatedcv", number = 1,
classProbs = T)
seed <- 90210; metric <- "Accuracy"
# ----------------------------------------------------------- #
# Train and evaluate the classification algorithms with kfold
# ----------------------------------------------------------- #
dataset <- HFfullImp[,-1]
mortality <- HFfullOutcomes[,3]
readmission <- HFfullOutcomes[,4]
# ----------------------------------------------------------- #
# kfold CV evaluation of classifiers
# ----------------------------------------------------------- #
fit.knn.kfold <- train(dataset, mortality, method="knn",
metric=metric, preProc="pca",
trControl=kfold)
fit.knn.kfold
fit.svm.kfold <- train(dataset, mortality, method="svmRadial",
metric=metric, preProc="pca",
trControl=kfold, fit = F)
fit.svm.kfold
fit.rf.kfold <- train(dataset, mortality, method="rf",
metric = metric, preProcess = "pca",
trControl = kfold)
fit.rf.kfold
fit.lasso.kfold <- train(dataset, mortality, method="lasso",
metric = metric, preProcess = "pca",
trControl = kfold)
fit.lasso.kfold <- train(dataset, mortality, method="lasso",
metric = metric,
preProcess = c("center", "scale"),
trControl = kfold)
kfold <- trainControl(method = "cv", number = 10)
loocv <- trainControl(method = "LOOCV")
seed <- 90210; metric <- "Accuracy"
dataset <- HFfullImp[,-1]
mortality <- HFfullOutcomes[,3]
readmission <- HFfullOutcomes[,4]
fit.knn.kfold <- train(dataset, mortality, method="knn",
metric=metric, preProc="pca",
trControl=kfold)
fit.knn.kfold
fit.svm.kfold <- train(dataset, mortality, method="svmRadial",
metric=metric, preProc="pca",
trControl=kfold, fit = F)
fit.svm.kfold
fit.rf.kfold <- train(dataset, mortality, method="rf",
metric = metric, preProcess = "pca",
trControl = kfold)
fit.rf.kfold
fit.lasso.kfold <- train(dataset, mortality, method="lasso",
metric = metric,
preProcess = c("center", "scale"),
trControl = kfold)
fit.lasso.kfold <- train(mortality~., data = dataset,
method="lasso", metric = metric,
preProcess = c("center", "scale"),
trControl = kfold)
fit.knn.kfold <- train(dataset, mortality, method="knn",
metric=metric, preProc="pca",
trControl=kfold)
fit.knn.kfold
fit.svm.kfold <- train(dataset, mortality, method="svmRadial",
metric=metric, preProc="pca",
trControl=kfold, fit = F)
fit.svm.kfold
fit.rf.kfold
