# Store indicator and non-indicator variables in seperate
# variables using the rm_indicator function
# ----------------------------------------------------------- #
HFpEFrmInd <- rm.indicator(HFpEFmat, n.uniq = 5)
HFmrEFrmInd <- rm.indicator(HFmrEFmat, n.uniq = 5)
# ----------------------------------------------------------- #
# Store the non-indicator variables for later
# ----------------------------------------------------------- #
HFpEFmatNoInd <- HFpEFrmInd$non.indicator
HFmrEFmatNoInd <- HFmrEFrmInd$non.indicator
# ----------------------------------------------------------- #
# Store the indicator variables for later
# ----------------------------------------------------------- #
HFpEFmatInd <- HFpEFrmInd$indicator
HFmrEFmatInd <- HFmrEFrmInd$indicator
# ----------------------------------------------------------- #
# Move some variables between matrices
# ----------------------------------------------------------- #
# Change RVfunction from non-indicator to indicator variable
# ----------------------------------------------------------- #
HFpEFrv <- move.columns(HFpEFmatNoInd, HFpEFmatInd,
"rvfunction")
HFpEFmatInd <- HFpEFrv$to.mat
HFpEFmatNoInd <- HFpEFrv$from.mat
# ----------------------------------------------------------- #
HFmrEFrv <- move.columns(HFmrEFmatNoInd, HFmrEFmatInd,
"rvfunction")
HFmrEFmatInd<- HFmrEFrv$to.mat
HFmrEFmatNoInd <- HFmrEFrv$from.mat
# ----------------------------------------------------------- #
# Change BmIadmission from indicator variable to non_indicator
# variable
# ----------------------------------------------------------- #
HFmrEFbmi <- move.columns(HFmrEFmatInd, HFmrEFmatNoInd,
"bmiadmission")
HFmrEFmatInd <- HFmrEFbmi$from.mat
HFmrEFmatNoInd <- HFmrEFbmi$to.mat
# ----------------------------------------------------------- #
# Change nyhaclass from non-indicator to indicator variable
# ----------------------------------------------------------- #
HFpEFnyhaClass <- move.columns(HFpEFmatNoInd, HFpEFmatInd,
"nyhaclass")
HFpEFmatInd <- HFpEFnyhaClass$to.mat
HFpEFmatNoInd <- HFpEFnyhaClass$from.mat
# ----------------------------------------------------------- #
# Convert zeros to missings, the following variables are not to
# be converted.
# ----------------------------------------------------------- #
notZerosHFpEF <- c("comorbidities", "weightchange",
"daysfollowupdischarge", "timetonextadm")
notZerosHFmrEF <- c("numbercomorditiesnoida","comorbidities",
"timetoadmission", "timetoecho",
"timetofollowupfrombnp",
"timetofollowupfromdischarge",
"timetofirstcardiachospitalisation")
HFpEFmatNoInd <- zero.to.na(HFpEFmatNoInd, notZerosHFpEF)
HFmrEFmatNoInd <- zero.to.na(HFmrEFmatNoInd, notZerosHFmrEF)
# ----------------------------------------------------------- #
# Plot of missing values distribution
# ----------------------------------------------------------- #
pathToImages <- "../../../doc/thesis/images/"
pdf(file=paste(c(pathToImages,"HFpEF_miss_dist.pdf"),
collapse = ""))
aggr(cbind(HFpEFmatNoInd, HFpEFmatInd), plot = T, sortVars = T,
bars = F, combined = T, ylabs = "", cex.axis = 0.7)
dev.off()
pdf(file = paste(c(pathToImages, "HFmrEF_miss_dist.pdf"),
collapse = ""))
aggr(cbind(HFmrEFmatNoInd, HFmrEFmatInd), plot = T,
sortVars = T, bars = F, combined = T, ylabs = "",
cex.axis = 0.7)
dev.off()
# ----------------------------------------------------------- #
# Summary of variables
# ----------------------------------------------------------- #
# Reorder data matrix by phenotype domains
# ----------------------------------------------------------- #
# In HFpEF matrix
# ----------------------------------------------------------- #
idHFpEF <- c("patientid")
demoHFpEF <- c("age", "gender", "white", "asian", "black",
"otherethnicity")
admSympHFpEF <- c("breathless", "chestpain", "orthopnoea",
"peripheraloedema", "palpdizzyfalls",
"pnd")
admSignHFpEF <- c("sbp", "dbp", "map", "admissionwgt",
"height", "bmiadmission", "weightchange",
"admissionsbnp", "pulse", "bp",
"asympthf", "devicetherapy")
riskFactHFpEF <- c("a-fib", "copdasthma", "irondef",
"obesity", "obesitybmi30", "nyhaclass",
"dm","ihd", "osa")
comorHFpEF <- c("comorbidities")
ecgHFpEF <- c("ecgblock","ecgblockcomment","ecgqrsduration",
"ecgqrsother","ecgrate","ecgrhythmother","twi",
"lvh","normalecgqrs", "lbbb", "rbbb", "lvhlev",
"sr")
labTestHFpEF <- c("albumin", "hb", "hba1c", "wbc", "tsat",
"glucose", "plts", "pcv", "ferritin",
"k", "ironlevels", "chol", "ntprobnp",
"gfr", "mcv", "na")
echoHFpEF <- c("lvef","ewave", "pasp", "tapse", "ea", "ee",
"laterals", "mr", "tr", "as", "awave",
"dilatedlv", "ladiameter", "ai", "laarea",
"raarea", "rwma", "calculatede", "rvfunction",
"edeceltime", "af")
outcomesHFpEF <- c("alive", "timefromprevadm", "timetohfadm",
"timetonextadm", "daysfollowupdischarge",
"hfhospitalisation", "daysfollowupbnp",
"los")
# ----------------------------------------------------------- #
# In HFmrEF matrix
# ----------------------------------------------------------- #
idHFmrEF <- c("patientid")
demoHFmrEF <- c("age", "gender", "white", "asian", "black",
"other", "mixed")
admSympHFmrEF <- c("breathless", "st")
admSignHFmrEF <- c("sbp", "dbp", "admissionwgt", "bp",
"bmiadmission", "pulse", "sympthf",
"symptlvhf", "symptlvunder",
"symptomatichfmref", "pathway")
riskFactHFmrEF <- c("a-fib", "copdasthma", "irondef", "dm",
"obesity", "copdasthma", "ihd",
"ar", "both", "cva", "sb", "procedures")
comorHFmrEF <- c("comorbidities", "numbercomorditiesnoida")
ecgHFmrEF <- c("ecgqrsduration", "ecgqrsother", "ecgrate",
"ecgrhythmother", "lvh", "normalecgqrs","nsr",
"lbbb", "rbbb", "sr")
labTestHFmrEF <- c("hb", "wbc", "tsat", "plts", "pcv","crp",
"ferritin", "k", "ironlevels", "chol",
"ntprobnp", "gfr","mcv","na","troponin")
echoHFmrEF <- c("lvef","ewave", "pasp", "ee", "mr", "tr",
"as", "ai", "rvfunction", "checkedee",
"timetoecho", "ee13diastolic", "af",
"eagroup", "edecelgroup", "finalla",
"lvhgroup", "lvhandorlae", "e9cms")
outcomesHFmrEF <- c("timetohfadm", "hfhospitalisation",
"los", "dischargeweight", "cardiachosp",
"truehf", "timetofollowupfromdischarge",
"timetofirstcardiachospitalisation",
"timetofollowupfrombnp", "newhf")
# ----------------------------------------------------------- #
# Long descriptive statistics
# ----------------------------------------------------------- #
dsHFpEFnames <- c(idHFpEF, demoHFpEF, admSympHFpEF,
admSignHFpEF, riskFactHFpEF,
comorHFpEF, ecgHFpEF, labTestHFpEF,
echoHFpEF, outcomesHFpEF)
dsHFmrEFnames <- c(idHFmrEF, demoHFmrEF, admSympHFmrEF,
admSignHFmrEF, riskFactHFmrEF,
comorHFmrEF, ecgHFmrEF, labTestHFmrEF,
echoHFmrEF, outcomesHFmrEF)
# ----------------------------------------------------------- #
dfHFpEF <- as.data.frame(HFpEFmat[,dsHFpEFnames])
capDescHFpEF <- "Patient characteristics: HFpEF variables"
labDescHFpEF <- "tab:desc_stat_HFpEF_variables"
tableContinuous(dfHFpEF, stats = c("n", "na", "min", "max",
"mean", "median", "s", "q1",
"q3"), cap = capDescHFpEF,
lab = labDescHFpEF)
# ----------------------------------------------------------- #
dfHFmrEF <- as.data.frame(HFmrEFmat[,dsHFmrEFnames])
capDescHFmrEF <- "Patient characteristics: HFmrEF variables"
labDescHFmrEF <- "tab:desc_stat_HFmrEF_variables"
tableContinuous(dfHFmrEF, stats = c("n", "na", "min", "max",
"mean", "median", "s",
"q1", "q3"),
cap = capDescHFmrEF, lab = labDescHFmrEF)
# ----------------------------------------------------------- #
# Outcomes table
# ----------------------------------------------------------- #
load("../raw_data/outcomes_HFpEF.Rdat")
load("../raw_data/outcomes_HFmrEF.Rdat")
r <- rep("", 5)
tabOutHFpEF <- rbind(label.summary(HFpEFoutcomes, 2,
c("Group", "Dead?",
"Readm?", "n", "% Tot"),
3, 5), r, r)
tabOutHFmrEF <- label.summary(HFmrEFoutcomes,
2, c("Group", "Dead?", "Readm?",
"n", "% Tot"), 3, 5)
print(xtable(cbind(tabOutHFpEF, tabOutHFmrEF)),
include.rownames = F)
# ----------------------------------------------------------- #
# Tables of top 10 missing values variables in both data sets
# ----------------------------------------------------------- #
# In HFpEF
# ----------------------------------------------------------- #
HFpEFmiss <- top.n.missing(cbind(HFpEFmatInd,
HFpEFmatNoInd), 11)
# ----------------------------------------------------------- #
# In HFmrEF
# ----------------------------------------------------------- #
HFmrEFmiss <- top.n.missing(cbind(HFmrEFmatInd,
HFmrEFmatNoInd),11)
# ----------------------------------------------------------- #
# Combine missing values table and convert to Latex code
# ----------------------------------------------------------- #
xtable(cbind(round(HFpEFmiss,3), rownames(HFmrEFmiss),
round(HFmrEFmiss,3)))
# ----------------------------------------------------------- #
# Save indicator variables and non indicator variables
# for later imputation
# ----------------------------------------------------------- #
save(HFpEFmatInd, file="data_files/HFpEF_ind_var.Rdat")
save(HFmrEFmatInd, file="data_files/HFmrEF_ind_var.Rdat")
save(HFpEFmatNoInd, file="data_files/HFpEF_not_ind.Rdat")
save(HFmrEFmatNoInd, file="data_files/HFmrEF_not_ind.Rdat")
# ----------------------------------------------------------- #
# ----------------------------------------------------------- #
# Install relevant packages (if not already done)
# ----------------------------------------------------------- #
Packages <- c("BaylorEdPsych", "mvnmle", "xtable", "Amelia",
"rlist", "mice", "caret")
# install.packages(Packages)
# ----------------------------------------------------------- #
# Load relevant packages
# ----------------------------------------------------------- #
lapply(Packages, library, character.only = TRUE)
source("_helper_func.R")
# ----------------------------------------------------------- #
# Load indicator and non indicator variables
# ----------------------------------------------------------- #
allDataFiles <- c("HFpEF_ind_var", "HFmrEF_ind_var",
"HFpEF_not_ind", "HFmrEF_not_ind")
lapply(gsub(" ", "", paste("data_files/", allDataFiles,
".Rdat")), load,.GlobalEnv)
# ----------------------------------------------------------- #
# Little's test to assess for missing completely at random.
# Remove variables with more than 60% missing values and
# that have near zero variance (not for indicator variables).
# ----------------------------------------------------------- #
# In HFpEF
# ----------------------------------------------------------- #
CutOff <- 0.5 # cut.off percentage
HFpEFind <- rm.missing(HFpEFmatInd, cut.off = CutOff,
near.zero.var = F)
HFpEFcon <- rm.missing(HFpEFmatNoInd, cut.off = CutOff)
FirstHFpEFcon <- split.matrix(HFpEFcon)$first.half
SecondHFpEFcon <- split.matrix(HFpEFcon)$second.half
HFpEFlist <- list(HFpEFind, FirstHFpEFcon, SecondHFpEFcon)
HFpEFmcar <- do.call(rbind, lapply(HFpEFlist, little.mcar))
HFpEFmcarNames <- c("indicator","continuous_1", "continuous_2")
rownames(HFpEFmcar) <- HFpEFmcarNames
# ----------------------------------------------------------- #
# In HFmrEF
# ----------------------------------------------------------- #
HFmrEFind <- rm.missing(HFmrEFmatInd, cut.off = CutOff,
near.zero.var = F)
HFmrEFcon <- rm.missing(HFmrEFmatNoInd, cut.off = CutOff)
FirstHFmrEFcon <- split.matrix(HFmrEFcon)$first.half
SecondHFmrEFcon <- split.matrix(HFmrEFcon)$second.half
HFmrEFlist <- list(HFmrEFind, FirstHFmrEFcon, SecondHFmrEFcon)
HFmrEFmcar <- do.call(rbind, lapply(HFmrEFlist, little.mcar))
HFmrEFmcarNames <- c("indicator","continuous_1","continuous_2")
rownames(HFmrEFmcar) <- HFmrEFmcarNames
xtable(rbind(HFpEFmcar, HFmrEFmcar), digits = c(0,0,0,4,0,5))
HFmrEFlist <- list(HFmrEFind, FirstHFmrEFcon)
HFmrEFmcar <- do.call(rbind, lapply(HFmrEFlist, little.mcar))
HFmrEFmcar
View(SecondHFmrEFcon)
View(SecondHFmrEFcon)
HFmrEFind <- rm.missing(HFmrEFmatInd, cut.off = CutOff,
near.zero.var = F)
HFmrEFcon <- rm.missing(HFmrEFmatNoInd, cut.off = CutOff)
FirstHFmrEFcon <- split.matrix(HFmrEFcon)$first.half
SecondHFmrEFcon <- split.matrix(HFmrEFcon)$second.half
SecondHFmrEFcon <- SecondHFmrEFcon[,sample(ncol(SecondHFmrEFcon))]
HFmrEFlist <- list(HFmrEFind, FirstHFmrEFcon, SecondHFmrEFcon)
HFmrEFmcar <- do.call(rbind, lapply(HFmrEFlist, little.mcar))
SecondHFmrEFcon
CutOff <- 0.55 # cut.off percentage
HFpEFind <- rm.missing(HFpEFmatInd, cut.off = CutOff,
near.zero.var = F)
HFpEFcon <- rm.missing(HFpEFmatNoInd, cut.off = CutOff)
FirstHFpEFcon <- split.matrix(HFpEFcon)$first.half
SecondHFpEFcon <- split.matrix(HFpEFcon)$second.half
HFpEFlist <- list(HFpEFind, FirstHFpEFcon, SecondHFpEFcon)
HFpEFmcar <- do.call(rbind, lapply(HFpEFlist, little.mcar))
HFpEFmcarNames <- c("indicator","continuous_1", "continuous_2")
rownames(HFpEFmcar) <- HFpEFmcarNames
# ----------------------------------------------------------- #
# In HFmrEF
# ----------------------------------------------------------- #
HFmrEFind <- rm.missing(HFmrEFmatInd, cut.off = CutOff,
near.zero.var = F)
HFmrEFcon <- rm.missing(HFmrEFmatNoInd, cut.off = CutOff)
FirstHFmrEFcon <- split.matrix(HFmrEFcon)$first.half
SecondHFmrEFcon <- split.matrix(HFmrEFcon)$second.half
HFmrEFlist <- list(HFmrEFind, FirstHFmrEFcon, SecondHFmrEFcon)
HFmrEFmcar <- do.call(rbind, lapply(HFmrEFlist, little.mcar))
HFmrEFmcarNames <- c("indicator","continuous_1","continuous_2")
rownames(HFmrEFmcar) <- HFmrEFmcarNames
xtable(rbind(HFpEFmcar, HFmrEFmcar), digits = c(0,0,0,4,0,5))
top.n.missing(cbind(HFpEFcon, HFpEFind), n = 10)
top.n.missing(cbind(HFmrEFcon, HFmrEFind), n = 10)
m <- 50 # number of bootstrap samples
HFpEFconImpEmList <- HFmrEFconImpEmList <- list()
FirstHFpEFBound   <- data.bounds(FirstHFpEFcon, 0, Inf)
SecondHFpEFBound  <- data.bounds(SecondHFpEFcon, 0, Inf)
FirstHFmrEFBound  <- data.bounds(FirstHFmrEFcon, 0, Inf)
SecondHFmrEFBound <- data.bounds(SecondHFmrEFcon, 0, Inf)
HFpEFfirstEM <- boot.em.impute(FirstHFpEFcon,
bounds = FirstHFpEFBound, n.boot = m)
HFpEFsecondEM <- boot.em.impute(SecondHFpEFcon,
bounds = SecondHFpEFBound, n.boot = m)
HFmrEFfirstEM <- boot.em.impute(FirstHFmrEFcon,
bounds = FirstHFmrEFBound, n.boot = m)
HFmrEFsecondEM <- boot.em.impute(SecondHFmrEFcon,
bounds = SecondHFmrEFBound, n.boot = m)
HFpEFconImpEm <- cbind(HFpEFfirstEM, HFpEFsecondEM)
HFmrEFconImpEm <- cbind(HFmrEFfirstEM, HFmrEFsecondEM)
# ----------------------------------------------------------- #
# Impute the indicator variables with classification and
# regression trees algorithm
# ----------------------------------------------------------- #
HFpEFindImpCart <- complete(mice(HFpEFind, method ="cart"))
HFmrEFindImpCart <- complete(mice(HFmrEFind,method ="cart"))
# ----------------------------------------------------------- #
# Merge imputed data into one data file
# ----------------------------------------------------------- #
HFpEF <- cbind(HFpEFconImpEm, HFpEFindImpCart)
HFmrEF <- cbind(HFmrEFconImpEm, HFmrEFindImpCart)
# ----------------------------------------------------------- #
# Save the data files
# ----------------------------------------------------------- #
save(HFpEF, file = "data_files/HFpEF.Rdat")
save(HFmrEF, file = "data_files/HFmrEF.Rdat")
# ----------------------------------------------------------- #
# ----------------------------------------------------------- #
# Install packages (if not already installed)
# ----------------------------------------------------------- #
Packages <- c("tikzDevice")
# install.packages(Packages)
# ----------------------------------------------------------- #
# Load package for docstring
# ----------------------------------------------------------- #
lapply(Packages, library, character.only = TRUE)
source("_helper_func.R")
# ----------------------------------------------------------- #
# Load imputed data
# ----------------------------------------------------------- #
allDataFiles <- c("HFpEF", "HFmrEF")
lapply(gsub(" ", "", paste("data_files/", allDataFiles,
".Rdat")), load,.GlobalEnv)
# ----------------------------------------------------------- #
# Principal component analysis
# ----------------------------------------------------------- #
HFpEFpca <- princomp(as.matrix(HFpEF), cor = T)
HFmrEFpca <- princomp(as.matrix(HFmrEF), cor = T)
pca.var.plot(HFpEFpca, 57, title = "HFpEF")
pca.var.plot(HFmrEFpca, 47, title = "HFmrEF")
pca.cluster.plot(HFpEFpca, ncp = 2, km.clust = 3,hc.clust = 3)
pca.cluster.plot(HFmrEFpca, ncp = 2, km.clust = 3, hc.clust=2)
pca.cluster.plot(HFmrEFpca, ncp = 2, km.clust = 2, hc.clust=2)
# ----------------------------------------------------------- #
# Install relevant packages (if not already done)
# ----------------------------------------------------------- #
Packages <- c("BaylorEdPsych", "mvnmle", "xtable", "Amelia",
"rlist", "mice", "caret")
# install.packages(Packages)
# ----------------------------------------------------------- #
# Load relevant packages
# ----------------------------------------------------------- #
lapply(Packages, library, character.only = TRUE)
source("_helper_func.R")
# ----------------------------------------------------------- #
# Load indicator and non indicator variables
# ----------------------------------------------------------- #
allDataFiles <- c("HFpEF_ind_var", "HFmrEF_ind_var",
"HFpEF_not_ind", "HFmrEF_not_ind")
lapply(gsub(" ", "", paste("data_files/", allDataFiles,
".Rdat")), load,.GlobalEnv)
# ----------------------------------------------------------- #
# Little's test to assess for missing completely at random.
# Remove variables with more than 60% missing values and
# that have near zero variance (not for indicator variables).
# ----------------------------------------------------------- #
# In HFpEF
# ----------------------------------------------------------- #
CutOff <- 0.52 # cut.off percentage
HFpEFind <- rm.missing(HFpEFmatInd, cut.off = CutOff,
near.zero.var = F)
HFpEFcon <- rm.missing(HFpEFmatNoInd, cut.off = CutOff)
FirstHFpEFcon <- split.matrix(HFpEFcon)$first.half
SecondHFpEFcon <- split.matrix(HFpEFcon)$second.half
HFpEFlist <- list(HFpEFind, FirstHFpEFcon, SecondHFpEFcon)
HFpEFmcar <- do.call(rbind, lapply(HFpEFlist, little.mcar))
HFpEFmcarNames <- c("indicator","continuous_1", "continuous_2")
rownames(HFpEFmcar) <- HFpEFmcarNames
# ----------------------------------------------------------- #
# In HFmrEF
# ----------------------------------------------------------- #
HFmrEFind <- rm.missing(HFmrEFmatInd, cut.off = CutOff,
near.zero.var = F)
HFmrEFcon <- rm.missing(HFmrEFmatNoInd, cut.off = CutOff)
FirstHFmrEFcon <- split.matrix(HFmrEFcon)$first.half
SecondHFmrEFcon <- split.matrix(HFmrEFcon)$second.half
HFmrEFlist <- list(HFmrEFind, FirstHFmrEFcon, SecondHFmrEFcon)
HFmrEFmcar <- do.call(rbind, lapply(HFmrEFlist, little.mcar))
HFmrEFmcarNames <- c("indicator","continuous_1","continuous_2")
rownames(HFmrEFmcar) <- HFmrEFmcarNames
xtable(rbind(HFpEFmcar, HFmrEFmcar), digits = c(0,0,0,4,0,5))
# ----------------------------------------------------------- #
# Report missing data after removing variables
# ----------------------------------------------------------- #
top.n.missing(cbind(HFpEFcon, HFpEFind), n = 10)
top.n.missing(cbind(HFmrEFcon, HFmrEFind), n = 10)
# ----------------------------------------------------------- #
# Impute missing values
# ----------------------------------------------------------- #
# Impute the non-indicator variables with the Bootstrap
# EM algorithm.
# ----------------------------------------------------------- #
m <- 50 # number of bootstrap samples
HFpEFconImpEmList <- HFmrEFconImpEmList <- list()
FirstHFpEFBound   <- data.bounds(FirstHFpEFcon, 0, Inf)
SecondHFpEFBound  <- data.bounds(SecondHFpEFcon, 0, Inf)
FirstHFmrEFBound  <- data.bounds(FirstHFmrEFcon, 0, Inf)
SecondHFmrEFBound <- data.bounds(SecondHFmrEFcon, 0, Inf)
HFpEFfirstEM <- boot.em.impute(FirstHFpEFcon,
bounds = FirstHFpEFBound, n.boot = m)
HFpEFsecondEM <- boot.em.impute(SecondHFpEFcon,
bounds = SecondHFpEFBound, n.boot = m)
HFmrEFfirstEM <- boot.em.impute(FirstHFmrEFcon,
bounds = FirstHFmrEFBound, n.boot = m)
HFmrEFsecondEM <- boot.em.impute(SecondHFmrEFcon,
bounds = SecondHFmrEFBound, n.boot = m)
HFpEFconImpEm <- cbind(HFpEFfirstEM, HFpEFsecondEM)
HFmrEFconImpEm <- cbind(HFmrEFfirstEM, HFmrEFsecondEM)
# ----------------------------------------------------------- #
# Impute the indicator variables with classification and
# regression trees algorithm
# ----------------------------------------------------------- #
HFpEFindImpCart <- complete(mice(HFpEFind, method ="cart"))
HFmrEFindImpCart <- complete(mice(HFmrEFind,method ="cart"))
# ----------------------------------------------------------- #
# Merge imputed data into one data file
# ----------------------------------------------------------- #
HFpEF <- cbind(HFpEFconImpEm, HFpEFindImpCart)
HFmrEF <- cbind(HFmrEFconImpEm, HFmrEFindImpCart)
# ----------------------------------------------------------- #
# Save the data files
# ----------------------------------------------------------- #
save(HFpEF, file = "data_files/HFpEF.Rdat")
save(HFmrEF, file = "data_files/HFmrEF.Rdat")
# ----------------------------------------------------------- #
# ----------------------------------------------------------- #
# Install packages (if not already installed)
# ----------------------------------------------------------- #
Packages <- c("tikzDevice")
# install.packages(Packages)
# ----------------------------------------------------------- #
# Load package for docstring
# ----------------------------------------------------------- #
lapply(Packages, library, character.only = TRUE)
source("_helper_func.R")
# ----------------------------------------------------------- #
# Load imputed data
# ----------------------------------------------------------- #
allDataFiles <- c("HFpEF", "HFmrEF")
lapply(gsub(" ", "", paste("data_files/", allDataFiles,
".Rdat")), load,.GlobalEnv)
# ----------------------------------------------------------- #
# Principal component analysis
# ----------------------------------------------------------- #
HFpEFpca <- princomp(as.matrix(HFpEF), cor = T)
HFmrEFpca <- princomp(as.matrix(HFmrEF), cor = T)
pca.var.plot(HFpEFpca, 57, title = "HFpEF")
pca.var.plot(HFmrEFpca, 47, title = "HFmrEF")
pca.var.plot(HFpEFpca, 56, title = "HFpEF")
pca.var.plot(HFmrEFpca, 46, title = "HFmrEF")
NbClust(as.data.frame(HFpEFpca$scores[, 1:56]),
distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans")
NbClust(as.data.frame(HFmrEFpca$scores[, 1:47]),
distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans")
NbClust(as.data.frame(HFmrEFpca$scores[, 1:47]),
distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans")
pca.cluster.plot(HFpEFpca, ncp = 2, km.clust = 3,hc.clust = 3)
pca.cluster.plot(HFpEFpca, ncp = 56, km.clust = 3,hc.clust = 3)
pca.cluster.plot(HFpEFpca, ncp = 56, km.clust = 2,hc.clust = 3)
pca.cluster.plot(HFpEFpca, ncp = 55, km.clust = 2,hc.clust = 3)
pca.cluster.plot(HFpEFpca, ncp = 58, km.clust = 2,hc.clust = 3)
pca.cluster.plot(HFpEFpca, ncp = 59, km.clust = 2,hc.clust = 3)
pca.cluster.plot(HFpEFpca, ncp = 60, km.clust = 2,hc.clust = 3)
pca.cluster.plot(HFpEFpca, ncp = 61, km.clust = 2,hc.clust = 3)
pca.cluster.plot(HFpEFpca, ncp = 62, km.clust = 2,hc.clust = 3)
pca.cluster.plot(HFpEFpca, ncp = 63, km.clust = 2,hc.clust = 3)
pca.cluster.plot(HFpEFpca, ncp = 64, km.clust = 2,hc.clust = 3)
pca.cluster.plot(HFpEFpca, ncp = 65, km.clust = 2,hc.clust = 3)
pca.cluster.plot(HFpEFpca, ncp = 66, km.clust = 2,hc.clust = 3)
pca.cluster.plot(HFpEFpca, ncp = 56, km.clust = 2,hc.clust = 3)
pca.cluster.plot(HFmrEFpca, ncp = 2, km.clust = 2, hc.clust=2)
pca.cluster.plot(HFmrEFpca, ncp = 47, km.clust = 2, hc.clust=2)
pca.cluster.plot(HFmrEFpca, ncp = 48, km.clust = 2, hc.clust=2)
pca.cluster.plot(HFmrEFpca, ncp = 40, km.clust = 2, hc.clust=2)
pca.cluster.plot(HFmrEFpca, ncp = 15, km.clust = 2, hc.clust=2)
pca.cluster.plot(HFmrEFpca, ncp = 10, km.clust = 2, hc.clust=2)
pca.cluster.plot(HFmrEFpca, ncp = 11, km.clust = 2, hc.clust=2)
pca.cluster.plot(HFpEFpca, ncp = 2, km.clust = 2,hc.clust = 3)
pca.cluster.plot(HFmrEFpca, ncp = 2, km.clust = 2, hc.clust=2)
pca.cluster.plot(HFmrEFpca, ncp = 2, km.clust = 2, hc.clust=3)
pca.cluster.plot(HFmrEFpca, ncp = 2, km.clust = 3, hc.clust=2)
pca.cluster.plot(HFpEFpca, ncp = 2, km.clust = 2,hc.clust = 3)
pca.cluster.plot(HFpEFpca, ncp = 2, km.clust = 3,hc.clust = 3)
pca.cluster.plot(HFpEFpca, ncp = 2, km.clust = 3,hc.clust = 3,
ellipse = F)
pca.cluster.plot(HFmrEFpca, ncp = 2, km.clust = 3, hc.clust=2,
ellipse = F)
