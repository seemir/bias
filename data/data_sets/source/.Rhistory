NbClust(HFfullpca$scores[,1:31], min.nc = 2, max.nc = 4,
method = "kmeans")
NbClust(HFpEFpca$scores[,1:34], min.nc = 2, max.nc = 4,
method = "kmeans")
NbClust(HFmrEFpca$scores[,1:31], min.nc = 2, max.nc = 4,
method = "kmeans")
# ----------------------------------------------------------- #
# Install relevant packages (if not already done)
# ----------------------------------------------------------- #
Packages <- c("Nbclust")
# install.packages(Packages)
# ----------------------------------------------------------- #
# Load relevant packages
# ----------------------------------------------------------- #
lapply(Packages, library, character.only = TRUE)
source("utilities.R")
# ----------------------------------------------------------- #
# Load pca objects and source utility functions
# ----------------------------------------------------------- #
allDataFiles <- c("HFfullpca", "HFpEFpca", "HFmrEFpca",
"SyndClass")
lapply(gsub(" ", "", paste("data_files/", allDataFiles,
".Rdat")), load,.GlobalEnv)
# ----------------------------------------------------------- #
# Install relevant packages (if not already done)
# ----------------------------------------------------------- #
Packages <- c("NbClust")
# install.packages(Packages)
# ----------------------------------------------------------- #
# Load relevant packages
# ----------------------------------------------------------- #
lapply(Packages, library, character.only = TRUE)
source("utilities.R")
# ----------------------------------------------------------- #
# Load pca objects and source utility functions
# ----------------------------------------------------------- #
allDataFiles <- c("HFfullpca", "HFpEFpca", "HFmrEFpca",
"SyndClass")
lapply(gsub(" ", "", paste("data_files/", allDataFiles,
".Rdat")), load,.GlobalEnv)
pca.cluster.plot(HFfullpca, 31, km.clust = 2, hc.clust = 2,
em.clust = 2, actual = SyndClass)
# ----------------------------------------------------------- #
# Install packages (if not already installed)
# ----------------------------------------------------------- #
Packages <- c("BaylorEdPsych", "Amelia", "mice", "NbClust",
"caret", "rlist", "xtable")
# install.packages(Packages)
# ----------------------------------------------------------- #
# Load package for docstring
# ----------------------------------------------------------- #
lapply(Packages, library, character.only = TRUE)
# ----------------------------------------------------------- #
# Load data set with same variables and source helper functions
# ----------------------------------------------------------- #
allDataFiles <- c("HFpEFind", "HFmrEFind",
"HFpEFnoInd", "HFmrEFnoInd",
"HFfullDataSet", "SyndClass")
lapply(gsub(" ", "", paste("data_files/", allDataFiles,
".Rdat")), load,.GlobalEnv)
source("utilities.R")
# ----------------------------------------------------------- #
# Summary of missing variables
# ----------------------------------------------------------- #
if(ncol(HFfullDataSet) == 55 | ncol(HFmrEFnoInd) == 28 |
ncol(HFpEFnoInd) == 28){
HFfullDataSet <- HFfullDataSet[,-1]
HFmrEFnoInd <- HFmrEFnoInd[, -1]
HFpEFnoInd <- HFpEFnoInd[, -1]
}
top.n.missing(HFfullDataSet, 10)
top.n.missing(cbind(HFmrEFnoInd, HFmrEFind), 10)
top.n.missing(cbind(HFpEFnoInd, HFpEFind), 10)
# ----------------------------------------------------------- #
# Split variables into indicator and categorical variables
# ----------------------------------------------------------- #
HFfullRmInd <- rm.indicator(HFfullDataSet, 8)
HFfullInd <- HFfullRmInd$indicator
HFfullNoInd <- HFfullRmInd$non.indicator
# ----------------------------------------------------------- #
# Little's test to assess for missing completely at random.
# Remove variables with more than a given cut.off missing
# values and that have near zero variance (not for indicator
# variables).
# ----------------------------------------------------------- #
# In Full data set
# ----------------------------------------------------------- #
CutOff <- 0.20 # cut.off percentage
HFfullInd <- rm.missing(HFfullInd, cut.off = CutOff,
near.zero.var = F)
HFfullNoInd <- rm.missing(HFfullNoInd, cut.off = CutOff)
HFfullList <- list(HFfullInd, HFfullNoInd)
HFfullMcar <- do.call(rbind, lapply(HFfullList, little.mcar))
HFfullCarNames <- c("indicator","continuous")
rownames(HFfullMcar) <- HFfullCarNames
# ----------------------------------------------------------- #
# In HFpEF
# ----------------------------------------------------------- #
CutOff <- 0.15 # cut.off percentage
HFpEFind <- rm.missing(HFpEFind, cut.off = CutOff,
near.zero.var = F)
HFpEFnoInd <- rm.missing(HFpEFnoInd, cut.off = CutOff)
HFpEFlist <- list(HFpEFind, HFpEFnoInd)
HFpEFmcar <- do.call(rbind, lapply(HFpEFlist, little.mcar))
HFpEFmcarNames <- c("indicator","continuous")
rownames(HFpEFmcar) <- HFpEFmcarNames
# ----------------------------------------------------------- #
# In HFmrEF
# ----------------------------------------------------------- #
CutOff <- 0.25 # cut.off percentage
HFmrEFind <- rm.missing(HFmrEFind, cut.off = CutOff,
near.zero.var = F)
HFmrEFnoInd <- rm.missing(HFmrEFnoInd, cut.off = CutOff)
HFmrEFlist <- list(HFmrEFind, HFmrEFnoInd)
HFmrEFmcar <- do.call(rbind, lapply(HFmrEFlist, little.mcar))
HFmrEFmcarNames <- c("indicator","continuous")
rownames(HFmrEFmcar) <- HFmrEFmcarNames
xtable(rbind(HFfullMcar, HFpEFmcar, HFmrEFmcar),
digits = c(0,0,0,4,0,5))
# ----------------------------------------------------------- #
# Report missing data after removing variables
# ----------------------------------------------------------- #
top.n.missing(cbind(HFfullNoInd, HFfullInd), n = 10)
top.n.missing(cbind(HFpEFnoInd, HFpEFind), n = 10)
top.n.missing(cbind(HFmrEFnoInd, HFmrEFind), n = 10)
# ----------------------------------------------------------- #
# Impute data using Bootstrap EM and CART
# ----------------------------------------------------------- #
# In Full data set
# ----------------------------------------------------------- #
m <- 100 # number of bootstrap samples
bnd <- data.bounds(HFfullNoInd, 0, Inf)
HFfullEm <- boot.em.impute(HFfullNoInd, bnd, n.boot = m)
HFfullCart <- complete(mice(HFfullInd, method = "cart"))
# ----------------------------------------------------------- #
# In HFpEF
# ----------------------------------------------------------- #
HFpEFconImpEmList <- HFmrEFconImpEmList <- list()
HFpEFbound   <- data.bounds(HFpEFnoInd, 0, Inf)
HFpEFem <- boot.em.impute(HFpEFnoInd, bounds = HFpEFbound,
n.boot = m)
HFpEFcart <- complete(mice(HFpEFind, method ="cart"))
# ----------------------------------------------------------- #
# In HFmrEF
# ----------------------------------------------------------- #
HFmrEFbound <- data.bounds(HFmrEFnoInd, 0, Inf)
HFmrEFem <- boot.em.impute(HFmrEFnoInd,
bounds = HFmrEFbound,
n.boot = m)
HFmrEFcart <- complete(mice(HFmrEFind, method ="cart"))
# ----------------------------------------------------------- #
# Combine imputed data sets into one
# ----------------------------------------------------------- #
HFfullImp <- cbind(HFfullEm, HFfullCart)
HFpEFimp <- cbind(HFpEFem, HFpEFcart)
HFmrEFimp <- cbind(HFmrEFem, HFmrEFcart)
HFfullImp
HFfullImp <- sort.column.names(HFfullImp, id.col = F)
HFpEFimp <- sort.column.names(HFpEFimp, id.col = F)
HFmrEFimp <- sort.column.names(HFmrEFimp, id.col = F)
# ----------------------------------------------------------- #
# Save full data set
# ----------------------------------------------------------- #
path <- "data_files/"; r <- ".Rdat"
fileNames <- c("HFfullImp", "HFpEFimp", "HFmrEFimp")
for (name in fileNames){
save(list = (name), file = paste(path, name, r, sep = ""))
}
HFfullpca <- princomp(HFfullImp, cor = T)
HFpEFpca <- princomp(HFpEFimp, cor = T)
HFmrEFpca <- princomp(HFmrEFimp, cor = T)
pca.var.plot(HFfullpca, 31, title = "HF same variables")
pca.var.plot(HFpEFpca, 34, title = "HFpEF")
pca.var.plot(HFmrEFpca, 31, title = "HFmrEF")
pca.var.plot(HFfullpca, 31, title = "HF same variables")
pca.var.plot(HFpEFpca, 34, title = "HFpEF")
pca.var.plot(HFmrEFpca, 31, title = "HFmrEF")
path <- "data_files/"; r <- ".Rdat"
objects <- c("HFfullpca", "HFpEFpca", "HFmrEFpca")
for (object in objects){
save(list = (object), file = paste(path, object, r, sep = ""))
}
# ----------------------------------------------------------- #
# Install relevant packages (if not already done)
# ----------------------------------------------------------- #
Packages <- c("NbClust")
# install.packages(Packages)
# ----------------------------------------------------------- #
# Load relevant packages
# ----------------------------------------------------------- #
lapply(Packages, library, character.only = TRUE)
source("utilities.R")
# ----------------------------------------------------------- #
# Load pca objects and source utility functions
# ----------------------------------------------------------- #
allDataFiles <- c("HFfullpca", "HFpEFpca", "HFmrEFpca",
"SyndClass")
lapply(gsub(" ", "", paste("data_files/", allDataFiles,
".Rdat")), load,.GlobalEnv)
NbClust(HFfullpca$scores[,1:31], min.nc = 2, max.nc = 4,
method = "kmeans")
NbClust(HFpEFpca$scores[,1:34], min.nc = 2, max.nc = 4,
method = "kmeans")
NbClust(HFmrEFpca$scores[,1:31], min.nc = 2, max.nc = 4,
method = "kmeans")
pca.cluster.plot(HFfullpca, 31, km.clust = 2, hc.clust = 2,
em.clust = 2, actual = SyndClass)
HFfullpca$scores
nrow(HFfullpca$scores)
pca.cluster.plot(HFfullpca, 31, km.clust = 2, hc.clust = 2,
em.clust = 2, actual = SyndClass[,2])
pca.cluster.plot(HFfullpca, 28, km.clust = 2, hc.clust = 2,
em.clust = 2, actual = SyndClass[,2])
pca.cluster.plot(HFfullpca, 2, km.clust = 2, hc.clust = 2,
em.clust = 2, actual = SyndClass[,2])
pca.cluster.plot(HFfullpca, 3, km.clust = 2, hc.clust = 2,
em.clust = 2, actual = SyndClass[,2])
pca.cluster.plot(HFfullpca, 5, km.clust = 2, hc.clust = 2,
em.clust = 2, actual = SyndClass[,2])
pca.cluster.plot(HFfullpca, 10, km.clust = 2, hc.clust = 2,
em.clust = 2, actual = SyndClass[,2])
pca.cluster.plot(HFfullpca, 11, km.clust = 2, hc.clust = 2,
em.clust = 2, actual = SyndClass[,2])
pca.cluster.plot(HFfullpca, 20, km.clust = 2, hc.clust = 2,
em.clust = 2, actual = SyndClass[,2])
pca.cluster.plot(HFfullpca, 25, km.clust = 2, hc.clust = 2,
em.clust = 2, actual = SyndClass[,2])
pca.cluster.plot(HFfullpca, 27, km.clust = 2, hc.clust = 2,
em.clust = 2, actual = SyndClass[,2])
pca.cluster.plot(HFfullpca, 29, km.clust = 2, hc.clust = 2,
em.clust = 2, actual = SyndClass[,2])
pca.cluster.plot(HFfullpca, 31, km.clust = 2, hc.clust = 2,
em.clust = 2, actual = SyndClass[,2])
pca.cluster.plot(HFfullpca, 30, km.clust = 2, hc.clust = 2,
em.clust = 2, actual = SyndClass[,2])
pca.cluster.plot(HFfullpca, 20, km.clust = 2, hc.clust = 2,
em.clust = 2, actual = SyndClass[,2],
return.clust = T)
pca.cluster.plot(HFfullpca, 21, km.clust = 2, hc.clust = 2,
em.clust = 2, actual = SyndClass[,2],
return.clust = T)
pca.cluster.plot(HFfullpca, 21, km.clust = 2, hc.clust = 2,
em.clust = 2, actual = SyndClass[,2],
return.clust = T, ellipse = F)
NbClust(HFfullpca$scores[,1:21], min.nc = 2, max.nc = 4,
method = "kmeans")
clustPef <- pca.cluster.plot(HFmrEFpca, 21, km.clust = 2,
hc.clust = 2, em.clust = 2,
actual = SyndClass[,2],
return.clust = T, ellipse = F)
clustPef <- pca.cluster.plot(HFmrEFpca, 21, km.clust = 2,
hc.clust = 2, em.clust = 2,
return.clust = T, ellipse = F)
clustPef <- pca.cluster.plot(HFmrEFpca, 34, km.clust = 2,
hc.clust = 2, em.clust = 2,
return.clust = T, ellipse = F)
NbClust(HFpEFpca$scores[,1:34], min.nc = 2, max.nc = 4,
method = "kmeans")
clustPef <- pca.cluster.plot(HFmrEFpca, 34, km.clust = 4,
hc.clust = 4, em.clust = 4,
return.clust = T, ellipse = F)
clustPef <- pca.cluster.plot(HFmrEFpca, 34, km.clust = 2,
hc.clust = 2, em.clust = 2,
return.clust = T, ellipse = F)
clustFull <- pca.cluster.plot(HFfullpca, 31, km.clust = 2,
hc.clust = 2, em.clust = 2,
actual = SyndClass[,2],
return.clust = T, ellipse = F)
# ----------------------------------------------------------- #
# Install packages (if not already installed)
# ----------------------------------------------------------- #
Packages <- c("BaylorEdPsych", "Amelia", "mice", "NbClust",
"caret", "rlist", "xtable")
# install.packages(Packages)
# ----------------------------------------------------------- #
# Load package for docstring
# ----------------------------------------------------------- #
lapply(Packages, library, character.only = TRUE)
# ----------------------------------------------------------- #
# Load data set with same variables and source helper functions
# ----------------------------------------------------------- #
allDataFiles <- c("HFpEFind", "HFmrEFind",
"HFpEFnoInd", "HFmrEFnoInd",
"HFfullDataSet", "SyndClass")
lapply(gsub(" ", "", paste("data_files/", allDataFiles,
".Rdat")), load,.GlobalEnv)
source("utilities.R")
View(HFfullDataSet)
top.n.missing(HFfullDataSet, 10)
top.n.missing(cbind(HFmrEFnoInd, HFmrEFind), 10)
top.n.missing(cbind(HFpEFnoInd, HFpEFind), 10)
HFfullRmInd <- rm.indicator(HFfullDataSet, 8)
HFfullInd <- HFfullRmInd$indicator
HFfullNoInd <- HFfullRmInd$non.indicator
CutOff <- 0.20 # cut.off percentage
HFfullInd <- rm.missing(HFfullInd, cut.off = CutOff,
near.zero.var = F)
HFfullNoInd <- rm.missing(HFfullNoInd, cut.off = CutOff)
HFfullList <- list(HFfullInd, HFfullNoInd)
HFfullMcar <- do.call(rbind, lapply(HFfullList, little.mcar))
HFfullCarNames <- c("indicator","continuous")
rownames(HFfullMcar) <- HFfullCarNames
# ----------------------------------------------------------- #
# In HFpEF
# ----------------------------------------------------------- #
CutOff <- 0.15 # cut.off percentage
HFpEFind <- rm.missing(HFpEFind, cut.off = CutOff,
near.zero.var = F)
HFpEFnoInd <- rm.missing(HFpEFnoInd, cut.off = CutOff)
HFpEFlist <- list(HFpEFind, HFpEFnoInd)
HFpEFmcar <- do.call(rbind, lapply(HFpEFlist, little.mcar))
HFpEFmcarNames <- c("indicator","continuous")
rownames(HFpEFmcar) <- HFpEFmcarNames
# ----------------------------------------------------------- #
# In HFmrEF
# ----------------------------------------------------------- #
CutOff <- 0.25 # cut.off percentage
HFmrEFind <- rm.missing(HFmrEFind, cut.off = CutOff,
near.zero.var = F)
HFmrEFnoInd <- rm.missing(HFmrEFnoInd, cut.off = CutOff)
HFmrEFlist <- list(HFmrEFind, HFmrEFnoInd)
HFmrEFmcar <- do.call(rbind, lapply(HFmrEFlist, little.mcar))
HFmrEFmcarNames <- c("indicator","continuous")
rownames(HFmrEFmcar) <- HFmrEFmcarNames
xtable(rbind(HFfullMcar, HFpEFmcar, HFmrEFmcar),
digits = c(0,0,0,4,0,5))
top.n.missing(cbind(HFfullNoInd, HFfullInd), n = 10)
top.n.missing(cbind(HFpEFnoInd, HFpEFind), n = 10)
top.n.missing(cbind(HFmrEFnoInd, HFmrEFind), n = 10)
m <- 100 # number of bootstrap samples
bnd <- data.bounds(HFfullNoInd, 0, Inf)
HFfullEm <- boot.em.impute(HFfullNoInd, bnd, n.boot = m)
HFfullCart <- complete(mice(HFfullInd, method = "cart"))
# ----------------------------------------------------------- #
# In HFpEF
# ----------------------------------------------------------- #
HFpEFconImpEmList <- HFmrEFconImpEmList <- list()
HFpEFbound   <- data.bounds(HFpEFnoInd, 0, Inf)
HFpEFem <- boot.em.impute(HFpEFnoInd, bounds = HFpEFbound,
n.boot = m)
HFpEFcart <- complete(mice(HFpEFind, method ="cart"))
# ----------------------------------------------------------- #
# In HFmrEF
# ----------------------------------------------------------- #
HFmrEFbound <- data.bounds(HFmrEFnoInd, 0, Inf)
HFmrEFem <- boot.em.impute(HFmrEFnoInd,
bounds = HFmrEFbound,
n.boot = m)
HFmrEFcart <- complete(mice(HFmrEFind, method ="cart"))
# ----------------------------------------------------------- #
# Combine imputed data sets into one
# ----------------------------------------------------------- #
HFfullImp <- cbind(HFfullEm, HFfullCart)
HFpEFimp <- cbind(HFpEFem, HFpEFcart)
HFmrEFimp <- cbind(HFmrEFem, HFmrEFcart)
HFfullImp <- sort.column.names(HFfullImp, id.col = F)
HFpEFimp <- sort.column.names(HFpEFimp, id.col = F)
HFmrEFimp <- sort.column.names(HFmrEFimp, id.col = F)
View(HFfullImp)
HFfullImp <- cbind(HFfullEm, HFfullCart)
HFpEFimp <- cbind(HFpEFem, HFpEFcart)
HFmrEFimp <- cbind(HFmrEFem, HFmrEFcart)
# ----------------------------------------------------------- #
# Sort columns and remove 328 outlier
# ----------------------------------------------------------- #
HFfullImp <- sort.column.names(HFfullImp, id.col = T)
HFpEFimp <- sort.column.names(HFpEFimp, id.col = T)
HFmrEFimp <- sort.column.names(HFmrEFimp, id.col = T)
path <- "data_files/"; r <- ".Rdat"
fileNames <- c("HFfullImp", "HFpEFimp", "HFmrEFimp")
for (name in fileNames){
save(list = (name), file = paste(path, name, r, sep = ""))
}
HFfullpca <- princomp(HFfullImp, cor = T)
HFpEFpca <- princomp(HFpEFimp, cor = T)
HFmrEFpca <- princomp(HFmrEFimp, cor = T)
pca.var.plot(HFfullpca, 31, title = "HF same variables")
pca.var.plot(HFpEFpca, 34, title = "HFpEF")
pca.var.plot(HFmrEFpca, 31, title = "HFmrEF")
path <- "data_files/"; r <- ".Rdat"
objects <- c("HFfullpca", "HFpEFpca", "HFmrEFpca")
for (object in objects){
save(list = (object), file = paste(path, object, r, sep = ""))
}
# ----------------------------------------------------------- #
# Install relevant packages (if not already done)
# ----------------------------------------------------------- #
Packages <- c("NbClust")
# install.packages(Packages)
# ----------------------------------------------------------- #
# Load relevant packages
# ----------------------------------------------------------- #
lapply(Packages, library, character.only = TRUE)
source("utilities.R")
# ----------------------------------------------------------- #
# Load pca objects and source utility functions
# ----------------------------------------------------------- #
allDataFiles <- c("HFfullpca", "HFpEFpca", "HFmrEFpca",
"SyndClass")
lapply(gsub(" ", "", paste("data_files/", allDataFiles,
".Rdat")), load,.GlobalEnv)
NbClust(HFfullpca$scores[,1:31], min.nc = 2, max.nc = 4,
method = "kmeans")
NbClust(HFpEFpca$scores[,1:34], min.nc = 2, max.nc = 4,
method = "kmeans")
NbClust(HFmrEFpca$scores[,1:31], min.nc = 2, max.nc = 4,
method = "kmeans")
clustFull <- pca.cluster.plot(HFfullpca, 31, km.clust = 2,
hc.clust = 2, em.clust = 2,
actual = SyndClass[,2],
return.clust = T, ellipse = F)
clustPef <- pca.cluster.plot(HFmrEFpca, 34, km.clust = 2,
hc.clust = 2, em.clust = 2,
return.clust = T, ellipse = F)
clustPef <- pca.cluster.plot(HFmrEFpca, 34, km.clust = 2,
hc.clust = 2, em.clust = 2,
return.clust = T, ellipse = F)
clustFull <- pca.cluster.plot(HFfullpca, 31, km.clust = 2,
hc.clust = 2, em.clust = 2,
actual = SyndClass[,2],
return.clust = T, ellipse = F)
clustPef <- pca.cluster.plot(HFmrEFpca, 33, km.clust = 2,
hc.clust = 2, em.clust = 2,
return.clust = T, ellipse = F)
clustPef <- pca.cluster.plot(HFmrEFpca, 30, km.clust = 2,
hc.clust = 2, em.clust = 2,
return.clust = T, ellipse = F)
clustPef <- pca.cluster.plot(HFmrEFpca, 31, km.clust = 2,
hc.clust = 2, em.clust = 2,
return.clust = T, ellipse = F)
NbClust(HFpEFpca$scores[,1:31], min.nc = 2, max.nc = 4,
method = "kmeans")
NbClust(HFmrEFpca$scores[,1:31], min.nc = 2, max.nc = 4,
method = "kmeans")
clustPef <- pca.cluster.plot(HFpEFpca, 31, km.clust = 2,
hc.clust = 2, em.clust = 2,
return.clust = T, ellipse = F)
clustPef <- pca.cluster.plot(HFmrEFpca, 31, km.clust = 2,
hc.clust = 2, em.clust = 2,
return.clust = T, ellipse = F)
# ----------------------------------------------------------- #
# Install relevant packages (if not already done)
# ----------------------------------------------------------- #
Packages <- c("NbClust")
# install.packages(Packages)
# ----------------------------------------------------------- #
# Load relevant packages
# ----------------------------------------------------------- #
lapply(Packages, library, character.only = TRUE)
source("utilities.R")
# ----------------------------------------------------------- #
# Load pca objects and source utility functions
# ----------------------------------------------------------- #
allDataFiles <- c("HFfullpca", "HFpEFpca", "HFmrEFpca",
"SyndClass")
lapply(gsub(" ", "", paste("data_files/", allDataFiles,
".Rdat")), load,.GlobalEnv)
NbClust(HFfullpca$scores[,1:31], min.nc = 2, max.nc = 4,
method = "kmeans")
NbClust(HFpEFpca$scores[,1:31], min.nc = 2, max.nc = 4,
method = "kmeans")
NbClust(HFmrEFpca$scores[,1:31], min.nc = 2, max.nc = 4,
method = "kmeans")
clustFull <- pca.cluster.plot(HFfullpca, 31, km.clust = 2,
hc.clust = 2, em.clust = 2,
actual = SyndClass[,2],
return.clust = T, ellipse = F)
compare.baseline(clustFull)
# ----------------------------------------------------------- #
# Install relevant packages (if not already done)
# ----------------------------------------------------------- #
Packages <- c("NbClust")
# install.packages(Packages)
# ----------------------------------------------------------- #
# Load relevant packages
# ----------------------------------------------------------- #
lapply(Packages, library, character.only = TRUE)
source("utilities.R")
# ----------------------------------------------------------- #
# Load pca objects and source utility functions
# ----------------------------------------------------------- #
allDataFiles <- c("HFfullpca", "HFpEFpca", "HFmrEFpca",
"HFfullImp","HFpEFimp, HFmrEFimp",
"SyndClass")
lapply(gsub(" ", "", paste("data_files/", allDataFiles,
".Rdat")), load,.GlobalEnv)
# ----------------------------------------------------------- #
# Install relevant packages (if not already done)
# ----------------------------------------------------------- #
Packages <- c("NbClust")
# install.packages(Packages)
# ----------------------------------------------------------- #
# Load relevant packages
# ----------------------------------------------------------- #
lapply(Packages, library, character.only = TRUE)
source("utilities.R")
# ----------------------------------------------------------- #
# Load pca objects and source utility functions
# ----------------------------------------------------------- #
allDataFiles <- c("HFfullpca", "HFpEFpca", "HFmrEFpca",
"HFfullImp","HFpEFimp", "HFmrEFimp",
"SyndClass")
lapply(gsub(" ", "", paste("data_files/", allDataFiles,
".Rdat")), load,.GlobalEnv)
clustFull <- pca.cluster.plot(HFfullpca, 31, km.clust = 2,
hc.clust = 2, em.clust = 2,
actual = SyndClass[,2],
return.clust = T, ellipse = F)
compare.baseline(HFfullImp, clustFull$ACT)
clustFull$ACT
HFfullImp
compare.baseline(HFfullImp, clustFull$ACT)
