#'
#' @description This function return a vector with the percentage of missing
#' values for all variables in a dataset
#'
#' @param data dataframe. Dataframe containing missing values
pmv <- seq(0, length.out = length(data))
for (i in 1:length(data)){
pmv[i] <- sum(is.na(data[i])) / nrow(data[i])
}
pmv <- matrix(pmv, ncol = length(data))
colnames(pmv) <- colnames(data); rownames(pmv) <- "pmv"
return(pmv)
}
HEpEF_dataframe[is.na(HEpEF_dataframe)] <- NA
#Load package for knn imputation and docstring
library(impute)
library(docstring)
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF.Rdat")
make_na <- function(data){
#' Converts all the NaN in a dataframe to NA
#'
#' @description This function returns a dataframe in which all the NaN values
#' are replaced with NA values. Note! NaN (not a number) is not the R syntax
#' for missing values. The correct syntax is NA (not available).
#'
#' @param data dataframe. Dataframe containing NaN values
data[is.na(data)] <- NA
return(data)
}
pmv <- function(data){
#' The percentage of missing values (pmv) in all columns of a dataset
#'
#' @description This function return a vector with the percentage of missing
#' values for all variables in a dataset
#'
#' @param data dataframe. Dataframe containing missing values
pmv <- seq(0, length.out = length(data))
for (i in 1:length(data)){
pmv[i] <- sum(is.na(data[i])) / nrow(data[i])
}
pmv <- matrix(pmv, ncol = length(data))
colnames(pmv) <- colnames(data); rownames(pmv) <- "pmv"
return(pmv)
}
HEpEF_dataframe <- make_na(HEpEF_dataframe)
View(HEpEF_dataframe)
#Load package for knn imputation and docstring
library(impute)
library(docstring)
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF.Rdat")
make_na <- function(data){
#' Converts all the NaN in a dataframe to NA
#'
#' @description This function returns a dataframe in which all the NaN values
#' are replaced with NA values. Note! NaN (not a number) is not the R syntax
#' for missing values. The correct syntax is NA (not available).
#'
#' @param data dataframe. Dataframe containing NaN values
data[is.na(data)] <- NA
return(data)
}
pmv <- function(data){
#' The percentage of missing values (pmv) in all columns of a dataset
#'
#' @description This function return a vector with the percentage of missing
#' values for all variables in a dataset
#'
#' @param data dataframe. Dataframe containing missing values
pmv <- seq(0, length.out = length(data))
for (i in 1:length(data)){
pmv[i] <- sum(is.na(data[i])) / nrow(data[i])
}
pmv <- matrix(pmv, ncol = length(data))
colnames(pmv) <- colnames(data); rownames(pmv) <- "pmv"
return(pmv)
}
# Replace NaN values with NA using the make_na function
HEpEF_dataframe <- make_na(HEpEF_dataframe)
HEpEF_dataframe_imputed <- impute.knn(HEpEF_dataframe)
#Load package for knn imputation and docstring
library(impute)
library(docstring)
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF.Rdat")
make_na <- function(data){
#' Converts all the NaN in a dataframe to NA
#'
#' @description This function returns a dataframe in which all the NaN values
#' are replaced with NA values. Note! NaN (not a number) is not the R syntax
#' for missing values. The correct syntax is NA (not available).
#'
#' @param data dataframe. Dataframe containing NaN values
data[is.na(data)] <- NA
return(data)
}
pmv <- function(data){
#' The percentage of missing values (pmv) in all columns of a dataset
#'
#' @description This function return a vector with the percentage of missing
#' values for all variables in a dataset
#'
#' @param data dataframe. Dataframe containing missing values
pmv <- seq(0, length.out = length(data))
for (i in 1:length(data)){
pmv[i] <- sum(is.na(data[i])) / nrow(data[i])
}
pmv <- matrix(pmv, ncol = length(data))
colnames(pmv) <- colnames(data); rownames(pmv) <- "pmv"
return(pmv)
}
# Replace NaN values with NA using the make_na function
HEpEF_dataframe <- make_na(HEpEF_dataframe)
HEpEF_dataframe_imputed <- impute.knn(HEpEF_dataframe, colmax = 1)
View(HEpEF_dataframe)
#Load package for knn imputation and docstring
library(impute)
library(docstring)
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
make_na <- function(data){
#' Converts all the NaN in a dataframe to NA
#'
#' @description This function returns a dataframe in which all the NaN values
#' are replaced with NA values. Note! NaN (not a number) is not the R syntax
#' for missing values. The correct syntax is NA (not available).
#'
#' @param data dataframe. Dataframe containing NaN values
data[is.na(data)] <- NA
return(data)
}
pmv <- function(data){
#' The percentage of missing values (pmv) in all columns of a dataset
#'
#' @description This function return a vector with the percentage of missing
#' values for all variables in a dataset
#'
#' @param data dataframe. Dataframe containing missing values
pmv <- seq(0, length.out = length(data))
for (i in 1:length(data)){
pmv[i] <- sum(is.na(data[i])) / nrow(data[i])
}
pmv <- matrix(pmv, ncol = length(data))
colnames(pmv) <- colnames(data); rownames(pmv) <- "pmv"
return(pmv)
}
HEpEF_matrix <- make_na(HEpEF_matrix)
View(HEpEF_matrix)
make_na <- function(data){
#' Converts all the NaN in a dataframe to NA
#'
#' @description This function returns a dataframe in which all the NaN values
#' are replaced with NA values. Note! NaN (not a number) is not the R syntax
#' for missing values. The correct syntax is NA (not available).
#'
#' @param data dataframe. Dataframe containing NaN values
data[is.nan(data)] <- NA
return(data)
}
HEpEF_matrix <- make_na(HEpEF_matrix)
View(HEpEF_matrix)
HEpEF_matrix <- make_na(HEpEF_matrix)
HEpEF_matrix
make_na <- function(data){
#' Converts all the NaN in a dataframe to NA
#'
#' @description This function returns a dataframe in which all the NaN values
#' are replaced with NA values. Note! NaN (not a number) is not the R syntax
#' for missing values. The correct syntax is NA (not available).
#'
#' @param data dataframe. Dataframe containing NaN values
data[is.na(data)] <- NA
return(data)
}
pmv <- function(data){
#' The percentage of missing values (pmv) in all columns of a dataset
#'
#' @description This function return a vector with the percentage of missing
#' values for all variables in a dataset
#'
#' @param data dataframe. Dataframe containing missing values
pmv <- seq(0, length.out = length(data))
for (i in 1:length(data)){
pmv[i] <- sum(is.na(data[i])) / nrow(data[i])
}
pmv <- matrix(pmv, ncol = length(data))
colnames(pmv) <- colnames(data); rownames(pmv) <- "pmv"
return(pmv)
}
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
HEpEF_matrix
# Replace NaN values with NA using the make_na function
HEpEF_matrix[is.nan(HEpEF_matrix)]
HEpEF_matrix[is.nan(HEpEF_matrix)]
is.nan(HEpEF_matrix)
is.na(HEpEF_matrix)
View(HEpEF_matrix)
#Load package for knn imputation and docstring
library(impute)
library(docstring)
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
make_na <- function(data){
#' Converts all the NaN in a dataframe to NA
#'
#' @description This function returns a dataframe in which all the NaN values
#' are replaced with NA values. Note! NaN (not a number) is not the R syntax
#' for missing values. The correct syntax is NA (not available).
#'
#' @param data dataframe. Dataframe containing NaN values
data[is.na(data)] <- NA
return(data)
}
pmv <- function(data){
#' The percentage of missing values (pmv) in all columns of a dataset
#'
#' @description This function return a vector with the percentage of missing
#' values for all variables in a dataset
#'
#' @param data dataframe. Dataframe containing missing values
pmv <- seq(0, length.out = length(data))
for (i in 1:length(data)){
pmv[i] <- sum(is.na(data[i])) / nrow(data[i])
}
pmv <- matrix(pmv, ncol = length(data))
colnames(pmv) <- colnames(data); rownames(pmv) <- "pmv"
return(pmv)
}
#Load package for knn imputation and docstring
library(impute)
library(docstring)
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
make_na <- function(data){
#' Converts all the NaN in a matrix to NA
#'
#' @description This function returns a dataframe in which all the NaN values
#' are replaced with NA values. Note! NaN (not a number) is not the R syntax
#' for missing values. The correct syntax is NA (not available).
#'
#' @param data matrix. Matrix containing NaN values
data[is.nan(data)] <- NA
return(data)
}
pmv <- function(data){
#' The percentage of missing values (pmv) in all columns of a dataset
#'
#' @description This function return a vector with the percentage of missing
#' values for all variables in a dataset
#'
#' @param data matrix. Matrix containing missing values
pmv <- seq(0, length.out = length(data))
for (i in 1:length(data)){
pmv[i] <- sum(is.na(data[i])) / nrow(data[i])
}
pmv <- matrix(pmv, ncol = length(data))
colnames(pmv) <- colnames(data); rownames(pmv) <- "pmv"
return(pmv)
}
HEpEF_matrix <- make_na(HEpEF_matrix)
View(HEpEF_matrix)
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)
View(HEpEF_matrix_imputed)
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
View(HEpEF_matrix_imputed)
?impute.knn
View(HEpEF_matrix_imputed)
#Load package for knn imputation and docstring
library(impute)
library(docstring)
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
make_na <- function(data){
#' Converts all the NaN in a matrix to NA
#'
#' @description This function returns a dataframe in which all the NaN values
#' are replaced with NA values. Note! NaN (not a number) is not the R syntax
#' for missing values. The correct syntax is NA (not available).
#'
#' @param data matrix. Matrix containing NaN values
data[is.nan(data)] <- NA
return(data)
}
pmv <- function(data){
#' The percentage of missing values (pmv) in all columns of a dataset
#'
#' @description This function return a vector with the percentage of missing
#' values for all variables in a dataset
#'
#' @param data matrix. Matrix containing missing values
pmv <- seq(0, length.out = length(data))
for (i in 1:length(data)){
pmv[i] <- sum(is.na(data[i])) / nrow(data[i])
}
pmv <- matrix(pmv, ncol = length(data))
colnames(pmv) <- colnames(data); rownames(pmv) <- "pmv"
return(pmv)
}
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
View(HEpEF_matrix_imputed)
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
# Test that no values are missing
sum(pmv(HEpEF_matrix_imputed)) == 0
# Test that no values are missing
pmv(HEpEF_matrix_imputed)
sum(0)
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
# Test that no values are missing
pmv(HEpEF_matrix_imputed)
# Test that no values are missing
HEpEF_matrix[1]
# Test that no values are missing
HEpEF_matrix[,1]
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
# Test that no values are missing
sum(pmv(HEpEF_matrix_imputed)) == 0
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
# Test that no values are missing
sum(pmv(HEpEF_matrix_imputed)) == 0
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
pmv_vec <- seq(0, length.out = ncol(HEpEF_matrix))
for (i in 1:length(pmv_vec)){
pmv_vec[i] <- sum(is.na(HEpEF_matrix[,i])) / nrow(HEpEF_matrix[,i])
}
pmv_vec
is.na(HEpEF_matrix[,i])
sum(is.na(HEpEF_matrix[,i]))
nrow(HEpEF_matrix[,i])
HEpEF_matrix[,i]
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
pmv_vec <- seq(0, length.out = ncol(HEpEF_matrix))
for (i in 1:length(pmv_vec)){
pmv_vec[i] <- sum(is.na(HEpEF_matrix[,i])) / length(HEpEF_matrix[,i])
}
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
# Test that all values are imputed
pmv(HEpEF_matrix_imputed)
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
# Test that all values are imputed
pmv(HEpEF_matrix_imputed)
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
# Test that all values are imputed
pmv(HEpEF_matrix_imputed)
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
# Test that all values are imputed
pmv(HEpEF_matrix_imputed)
pmv(HEpEF_matrix_imputed)
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
pmv(HEpEF_matrix_imputed)
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
pmv(HEpEF_matrix_imputed)
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
pmv(HEpEF_matrix_imputed)
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
pmv(HEpEF_matrix_imputed)
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
pmv(HEpEF_matrix_imputed)
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
# Test that all missing values are imputed
sum(pmv(HEpEF_matrix_imputed)) == 0
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
# Test that all missing values are imputed
sum(pmv(HEpEF_matrix_imputed)) == 0
save(HEpEF_matrix_imputed, file = "HEpEF_matrix_imputed_k_10.Rdat")
