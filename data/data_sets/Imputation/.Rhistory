#' The percentage of missing values (pmv) in all columns of a dataset
#'
#' @description This function return a vector with the percentage of missing
#' values for all variables in a dataset
#'
#' @param data matrix. Matrix containing missing values
pmv <- seq(0, length.out = length(data))
for (i in 1:length(data)){
pmv[i] <- sum(is.na(data[i])) / nrow(data[i])
}
pmv <- matrix(pmv, ncol = length(data))
colnames(pmv) <- colnames(data); rownames(pmv) <- "pmv"
return(pmv)
}
HEpEF_matrix <- make_na(HEpEF_matrix)
View(HEpEF_matrix)
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)
View(HEpEF_matrix_imputed)
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
View(HEpEF_matrix_imputed)
?impute.knn
View(HEpEF_matrix_imputed)
#Load package for knn imputation and docstring
library(impute)
library(docstring)
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
make_na <- function(data){
#' Converts all the NaN in a matrix to NA
#'
#' @description This function returns a dataframe in which all the NaN values
#' are replaced with NA values. Note! NaN (not a number) is not the R syntax
#' for missing values. The correct syntax is NA (not available).
#'
#' @param data matrix. Matrix containing NaN values
data[is.nan(data)] <- NA
return(data)
}
pmv <- function(data){
#' The percentage of missing values (pmv) in all columns of a dataset
#'
#' @description This function return a vector with the percentage of missing
#' values for all variables in a dataset
#'
#' @param data matrix. Matrix containing missing values
pmv <- seq(0, length.out = length(data))
for (i in 1:length(data)){
pmv[i] <- sum(is.na(data[i])) / nrow(data[i])
}
pmv <- matrix(pmv, ncol = length(data))
colnames(pmv) <- colnames(data); rownames(pmv) <- "pmv"
return(pmv)
}
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
View(HEpEF_matrix_imputed)
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
# Test that no values are missing
sum(pmv(HEpEF_matrix_imputed)) == 0
# Test that no values are missing
pmv(HEpEF_matrix_imputed)
sum(0)
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
# Test that no values are missing
pmv(HEpEF_matrix_imputed)
# Test that no values are missing
HEpEF_matrix[1]
# Test that no values are missing
HEpEF_matrix[,1]
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
# Test that no values are missing
sum(pmv(HEpEF_matrix_imputed)) == 0
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
# Test that no values are missing
sum(pmv(HEpEF_matrix_imputed)) == 0
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
pmv_vec <- seq(0, length.out = ncol(HEpEF_matrix))
for (i in 1:length(pmv_vec)){
pmv_vec[i] <- sum(is.na(HEpEF_matrix[,i])) / nrow(HEpEF_matrix[,i])
}
pmv_vec
is.na(HEpEF_matrix[,i])
sum(is.na(HEpEF_matrix[,i]))
nrow(HEpEF_matrix[,i])
HEpEF_matrix[,i]
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
pmv_vec <- seq(0, length.out = ncol(HEpEF_matrix))
for (i in 1:length(pmv_vec)){
pmv_vec[i] <- sum(is.na(HEpEF_matrix[,i])) / length(HEpEF_matrix[,i])
}
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
# Test that all values are imputed
pmv(HEpEF_matrix_imputed)
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
# Test that all values are imputed
pmv(HEpEF_matrix_imputed)
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
# Test that all values are imputed
pmv(HEpEF_matrix_imputed)
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
# Test that all values are imputed
pmv(HEpEF_matrix_imputed)
pmv(HEpEF_matrix_imputed)
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
pmv(HEpEF_matrix_imputed)
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
pmv(HEpEF_matrix_imputed)
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
pmv(HEpEF_matrix_imputed)
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
pmv(HEpEF_matrix_imputed)
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
pmv(HEpEF_matrix_imputed)
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
# Test that all missing values are imputed
sum(pmv(HEpEF_matrix_imputed)) == 0
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
# Test that all missing values are imputed
sum(pmv(HEpEF_matrix_imputed)) == 0
save(HEpEF_matrix_imputed, file = "HEpEF_matrix_imputed_k_10.Rdat")
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10 neightbours
HEpEF_matrix_imputed <- impute.knn(HEpEF_matrix, colmax = 1)$data
# Test that all missing values are imputed
sum(pmv(HEpEF_matrix_imputed)) == 0
# Save the imputed data
save(HEpEF_matrix_imputed, file = "HEpEF_matrix_imputed_k_10.Rdat")
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10, 5 and 3 neightbours
HEpEF_matrix_imputed_k_10 <- impute.knn(HEpEF_matrix, colmax = 1)$data
HEpEF_matrix_imputed_k_5 <- impute.knn(HEpEF_matrix, k = 5, colmax = 1)$data
HEpEF_matrix_imputed_k_3 <- impute.knn(HEpEF_matrix, k = 3, colmax = 1)$data
# Test that all missing values are imputed
sum(pmv(HEpEF_matrix_imputed_k_10)) == 0
# Save the imputed data
save(HEpEF_matrix_imputed_k_10, file = "HEpEF_matrix_imputed_k_10.Rdat")
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10, 5 and 3 neightbours
HEpEF_matrix_imputed_k_10 <- impute.knn(HEpEF_matrix, colmax = 1)$data
HEpEF_matrix_imputed_k_5 <- impute.knn(HEpEF_matrix, k = 5, colmax = 1)$data
HEpEF_matrix_imputed_k_3 <- impute.knn(HEpEF_matrix, k = 3, colmax = 1)$data
# Test that all missing values are imputed
sum(pmv(HEpEF_matrix_imputed_k_10)) == 0
sum(pmv(HEpEF_matrix_imputed_k_5)) == 0
sum(pmv(HEpEF_matrix_imputed_k_3)) == 0
# Save the imputed data
save(HEpEF_matrix_imputed_k_10, file = "HEpEF_matrix_imputed_k_10.Rdat")
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=10, 5 and 3 neightbours
HEpEF_matrix_imputed_k_10 <- impute.knn(HEpEF_matrix, colmax = 1)$data
HEpEF_matrix_imputed_k_5 <- impute.knn(HEpEF_matrix, k = 5, colmax = 1)$data
HEpEF_matrix_imputed_k_3 <- impute.knn(HEpEF_matrix, k = 3, colmax = 1)$data
# Test that all missing values are imputed
sum(pmv(HEpEF_matrix_imputed_k_10)) == 0
sum(pmv(HEpEF_matrix_imputed_k_5)) == 0
sum(pmv(HEpEF_matrix_imputed_k_3)) == 0
# Save the imputed data
save(HEpEF_matrix_imputed_k_10, file = "HEpEF_matrix_imputed_k_10.Rdat")
save(HEpEF_matrix_imputed_k_5, file = "HEpEF_matrix_imputed_k_5.Rdat")
save(HEpEF_matrix_imputed_k_3, file = "HEpEF_matrix_imputed_k_3.Rdat")
View(HEpEF_matrix_imputed_k_10)
View(HEpEF_matrix_imputed_k_3)
View(HEpEF_matrix_imputed_k_5)
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=1, ... , 10 neightbours
#Load package for knn imputation
library(impute)
source("../_helper_func.R")
# Load HFpEF datafile
load("../../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=1, ... , 10 neightbours
source("_helper_func.R")
#Load package for knn imputation
library(impute)
source("_helper_func.R")
# Load HFpEF datafile
load("../../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Impute using knn algorithm with k=1, ... , 10 neightbours
# Load HFpEF datafile
load("../raw_data/data_use_HFpEF_matrix.Rdat")
#Load package for knn imputation
library(impute)
source("../_helper_func.R")
# Load HFpEF datafile
load("../../raw_data/data_use_HFpEF_matrix.Rdat")
# Replace NaN values with NA using the make_na function
HEpEF_matrix <- make_na(HEpEF_matrix)
# Remove the indicator variables as first step of analysis
HEpEF_matrix_no_ind <- rm_indicator(HEpEF_matrix, n_uniq = 5)
# Compare the number of missings to zeros
# m_val <- cbind(pmv(HEpEF_matrix_no_ind)$pmv_vec, pzv(HEpEF_matrix_no_ind)$pzv_vec)
# colnames(m_val) <- c("Missings', 'Zeros"); View(m_val)
# Convert zeros to na, the following variables are not to be convert.
not_zeros <- c("comorbidities", "weightchange",
"daysfollowupdischarge", "Timetonextadm")
# Impute using knn algorithm with k=1, ... , 10 neightbours
# k_max <- 10
# for (K in 1:k_max){
#   name <- paste("HEpEF_matrix_imputed_k", K, sep = "_")
#   imputed_matrix <- impute.knn(HEpEF_matrix, k = K, colmax = 1)$data
#   if(sum(pmv(imputed_matrix)) == 0){
#     assign(name, imputed_matrix)
#   }
# }
#Load package for knn imputation
library(impute)
source("../_helper_func.R")
# Load HFpEF datafile
load("../../raw_data/data_use_HFpEF_matrix.Rdat")
# ----------------------------------------------------------- #
# Load package for docstring
# ----------------------------------------------------------- #
library(docstring)
# ----------------------------------------------------------- #
# Helper function used in this thesis
# ----------------------------------------------------------- #
make_na <- function(data){
#' Converts all the NaN in a matrix to NA
#'
#' @description This function returns a matrix in which all
#' the NaN values are replaced with NA values. Note! NaN
#' ("not a number") is not the R syntax for missing values.
#' The correct syntax is NA ("not available").
#'
#' @param data matrix. Matrix containing NaN values
data[is.nan(data)] <- NA
return(data)
}
# ----------------------------------------------------------- #
summary_missing <- function(data){
#' Summary of the missing values in a dataset
#'
#' @description This function returns a list with the total
#' number of na values and the total percentage in the entire
#' dataset, including the percentage of missing values for
#' all variables (columns) and the relative percentage of
#' missing values to the total (both as vectors).
#'
#' @param data matrix. Matrix containing missing values
num_na <- sum(is.na(data))
tot_pmv <- num_na/prod(dim(data))
num_na_vec <- apply(data, 2, function(col) sum(is.na(col)))
pmv_vec <- num_na_vec / nrow(data)
rel_pmv_vec <- num_na_vec / num_na
outp <- list(num_na, tot_pmv, num_na_vec, pmv_vec,
rel_pmv_vec)
names(outp) <- c('num_na', 'tot_pmv', 'num_na_vec',
'pmv_vec', 'rel_pmv_vec')
return(outp)
}
# ----------------------------------------------------------- #
summary_zeros <- function(data){
#' Summary of the zero values in a dataset
#'
#' @description The function returns a list with the
#' percentage of zero values for all variables in a dataset,
#' including the total number of zero values and the total
#' percentage and the relative percentage of zero values
#' to the total.
#'
#' @param data matrix. Matrix containing zero values
num_zeros <- sum(colSums(data == 0, na.rm = T))
tot_pzv <- num_zeros / prod(dim(data))
num_zeros_vec <- colSums(data == 0, na.rm = T)
pzv_vec <- num_zeros_vec / nrow(data)
rel_pzv_vec <- num_zeros_vec / num_zeros
outp <- list(num_zeros, tot_pzv, num_zeros_vec, pzv_vec,
rel_pzv_vec)
names(outp) <- c('num_zeros', 'tot_pzv', 'num_zeros_vec',
'pzv_vec', 'rel_pzv_vec')
return(outp)
}
# ----------------------------------------------------------- #
rm_indicator <- function(data, n_uniq){
#' Removes indicator variable columns from a dataset based on
#' predefined number of unique element in that column
#'
#' @description This function return a matrix without
#' indicator variable columns. A indicator variable column is
#' defined as a column containing less that a predefined
#' number of unique elements (n_uniq)
#'
#' @param data matrix. Matrix containing indicator variables
#' @param n_uniq integer. Number of unique element in a
#' column needed for that column to be defined as a indicator
#' variable column.
non_indicator <- data[, apply(data, 2, function(col)
length(unique(col)) > n_uniq)]
ind_var_idx <- !(colnames(data) %in% colnames(non_indicator))
indicator <- data[, ind_var_idx]
outp <- list(non_indicator, indicator)
names(outp) <- c('non_indicator', 'indicator')
return(outp)
}
# ----------------------------------------------------------- #
zero_to_na <- function(data, except=NULL){
#' Convert zero datapoints to na in a dataset.
#'
#' @description This function converts all the zero datapoints
#' in a dataset into na. One can also supply a vector of
#' columnames (except) corresponding to variables that this
#' function should not be applied on.
#'
#' @param data matrix. Matrix containing zero datapoints
#' @param except character vector. Names of matrix column not
#' to apply function on.
exp_idx <- colnames(data) %in% except
exp_data <- data[, exp_idx]; not_exp_data <- data[, !exp_idx]
not_exp_data[not_exp_data == 0] <- NA;
data <- cbind(not_exp_data, exp_data);
return(data)
}
# ----------------------------------------------------------- #
move_columns <- function(from_mat, to_mat, column_name){
#' Move one column from one matric to another.
#'
#' @description This function moves one column with name
#' column_name from matrix called from_mat to matrix called
#' to_mat.
#'
#' @param from_mat matrix. Matrix to move column from
#' @param to_mat matrix. Matric to move column to
#' @param column_name character. Name of column to be moved
to_mat <- cbind(to_mat,from_mat[, colnames(from_mat) ==
column_name])
colnames(to_mat)[ncol(to_mat)] <- column_name
from_mat <- from_mat[, colnames(from_mat) != column_name]
outp <- list(from_mat, to_mat)
names(outp) <- c('from_mat','to_mat')
outp
}
# ----------------------------------------------------------- #
?make_na
